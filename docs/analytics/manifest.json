{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.1", "generated_at": "2022-01-06T10:40:05.234849Z", "invocation_id": "63e45b63-b4e2-4f74-b1bf-7fb9c87bd1f4", "env": {}, "project_id": "22d5bd62bde57dfbe80b366073050705", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "bigquery"}, "nodes": {"model.lumapps_dbt.all_days": {"raw_sql": "SELECT cast(date as date) as date\nFROM UNNEST(GENERATE_DATE_ARRAY('2020-09-01', CURRENT_DATE)) date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "utils", "all_days", "all_days"], "unique_id": "model.lumapps_dbt.all_days", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "utils/all_days/all_days.sql", "original_file_path": "models/utils/all_days/all_days.sql", "name": "all_days", "alias": "all_days", "checksum": {"name": "sha256", "checksum": "1a38d0f948e64ef93556f53e447b7216b4aa9268a7295e40f966fea84f2952e4"}, "tags": [], "refs": [], "sources": [], "description": "A list of all the days", "columns": {"date": {"name": "date", "description": "The day", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false}, "patch_path": "lumapps_dbt://models/utils/all_days/all_days.yml", "compiled_path": "target/compiled/lumapps_dbt/models/utils/all_days/all_days.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}}, "created_at": 1641465608, "compiled_sql": "SELECT cast(date as date) as date\nFROM UNNEST(GENERATE_DATE_ARRAY('2020-09-01', CURRENT_DATE)) date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`all_days`"}, "model.lumapps_dbt.fct_daily_user_activity": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        cluster_by = [\"date\", \"organization_id\"],\n        tags=[\"daily\"]\n    )\n}}\nWITH daily_activity as (\nSELECT\nuser_id as user_id,\norganization_id as organization_id,\ncast(TIMESTAMP_TRUNC(action_time,day) as date) as date,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'Content') as nb_content_views,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'Community') as nb_community_views,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'User') as nb_user_views,\nCOUNTIF(action_type = 'CommentAction' AND target_kind = 'Community') as nb_community_comments,\nCOUNTIF(action_type = 'CommentAction' AND target_kind = 'Content') as nb_content_comments,\nCOUNTIF(action_type = 'ReactAction' AND target_kind = 'Community') as nb_community_likes,\nCOUNTIF(action_type = 'ReactAction' AND target_kind = 'Content') as nb_content_likes,\nCOUNTIF(action_type = 'CreateAction' AND result_kind = 'Posts') as nb_posts,\nCOUNTIF(action_type = 'CreateAction' AND result_kind = 'Content') as nb_contents,\nCURRENT_DATETIME() as _last_dbt_run\nFROM  {{ref('stg_analytics__user_actions')}}\nWHERE action_time < DATETIME(current_date())\n{% if is_incremental() %}\nAND action_time > (select max(_last_dbt_run) from {{ this }})\n{% endif %}\nGROUP BY 1, 2, 3\n)\nSELECT daily_activity.*,\nCASE\n  WHEN nb_posts > 0 OR nb_contents > 0 THEN 'contributor'\n  WHEN nb_content_likes > 0 OR nb_content_comments > 0 OR nb_content_comments > 0 OR nb_community_comments > 0 THEN 'participant'\n  ELSE 'visitor'\nEND as engagement_level,\nFROM  daily_activity", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["silver", "daily"], "full_refresh": null, "labels": {"layer": "silver"}, "cluster_by": ["date", "organization_id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "silver", "product", "fct_daily_user_activity"], "unique_id": "model.lumapps_dbt.fct_daily_user_activity", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "silver/product/fct_daily_user_activity.sql", "original_file_path": "models/silver/product/fct_daily_user_activity.sql", "name": "fct_daily_user_activity", "alias": "fct_daily_user_activity", "checksum": {"name": "sha256", "checksum": "c42ee6429cb974129a69baccaece3704a556353a2ebd2ae7194f46c8a3d4646b"}, "tags": ["silver", "daily"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "Every day, a summary of the activity done on the platform by a user.", "columns": {"user_id": {"name": "user_id", "description": "The id of the user that visited the platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the associated customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The current date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_content_views": {"name": "nb_content_views", "description": "The amount of views done on contents by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_community_views": {"name": "nb_community_views", "description": "The amount of views done on communities by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_user_views": {"name": "nb_user_views", "description": "The amount of views done on communities by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_community_comments": {"name": "nb_community_comments", "description": "The amount of comments done on communities by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_content_comments": {"name": "nb_content_comments", "description": "The amount of comments done on contents by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_community_likes": {"name": "nb_community_likes", "description": "The amount of likes done on communities by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_content_likes": {"name": "nb_content_likes", "description": "The amount of likes done on contents by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_posts": {"name": "nb_posts", "description": "The amount of posts created by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_contents": {"name": "nb_contents", "description": "The amount of contents created by the user that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_level": {"name": "engagement_level", "description": "The engagement level for the day:\n- Visitor: user only viewed pages during the day\n- Participant: user created comments and liked items during the day\n- Contributor: user created posts and content that day\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/silver/product/product.yml", "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/fct_daily_user_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["daily"], "labels": {"layer": "silver"}, "materialized": "incremental", "cluster_by": ["date", "organization_id"]}, "created_at": 1641465608, "compiled_sql": "\nWITH daily_activity as (\nSELECT\nuser_id as user_id,\norganization_id as organization_id,\ncast(TIMESTAMP_TRUNC(action_time,day) as date) as date,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'Content') as nb_content_views,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'Community') as nb_community_views,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'User') as nb_user_views,\nCOUNTIF(action_type = 'CommentAction' AND target_kind = 'Community') as nb_community_comments,\nCOUNTIF(action_type = 'CommentAction' AND target_kind = 'Content') as nb_content_comments,\nCOUNTIF(action_type = 'ReactAction' AND target_kind = 'Community') as nb_community_likes,\nCOUNTIF(action_type = 'ReactAction' AND target_kind = 'Content') as nb_content_likes,\nCOUNTIF(action_type = 'CreateAction' AND result_kind = 'Posts') as nb_posts,\nCOUNTIF(action_type = 'CreateAction' AND result_kind = 'Content') as nb_contents,\nCURRENT_DATETIME() as _last_dbt_run\nFROM  `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\nWHERE action_time < DATETIME(current_date())\n\nAND action_time > (select max(_last_dbt_run) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_daily_user_activity`)\n\nGROUP BY 1, 2, 3\n)\nSELECT daily_activity.*,\nCASE\n  WHEN nb_posts > 0 OR nb_contents > 0 THEN 'contributor'\n  WHEN nb_content_likes > 0 OR nb_content_comments > 0 OR nb_content_comments > 0 OR nb_community_comments > 0 THEN 'participant'\n  ELSE 'visitor'\nEND as engagement_level,\nFROM  daily_activity", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`fct_daily_user_activity`"}, "model.lumapps_dbt.fct_session": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key='session_id'\n    )\n}}\n\n-- need to grab all events for relevant users\nwith events as (\n    select\n        action_type,\n        cell,\n        user_id,\n        organization_id,\n        action_time,\n        target_kind,\n        target_id,\n        result_kind,\n        result_id,\n        cast(TIMESTAMP_TRUNC(action_time,day) as date) as date_day\n    from {{ref('stg_analytics__user_actions')}}\n    {% if is_incremental() %}\n    where action_time > (\n          select\n            {{ dbt_utils.dateadd(\n                'hour',\n                -3,\n                'max(session_started_at)'\n            ) }}\n          from {{ this }} )\n    {% endif %}\n),\nprevious_event as (\n    select\n        *,\n        lag(action_time) over(partition by user_id order by action_time asc) as previous_event_at\n    from events\n),\nnew_sessions as (\n\n    select\n        *,\n        -- had the previous session timed out?\n        case when {{ dbt_utils.datediff('previous_event_at', 'action_time', 'minute') }} > 30 or previous_event_at is null then 1\n        else 0 end as is_new_session\n\n    from previous_event\n),\nsession_numbers as (\n\n    select *,\n\n    -- will cumulatively create session numbers\n    sum(is_new_session) over (\n            partition by user_id\n            order by action_time asc\n            rows between unbounded preceding and current row\n            ) as session_number\n\n    from new_sessions\n),\nsession_ids as (\n    select\n        *,\n        min(action_time) over (partition by user_id, session_number) as session_started_at,\n        max(action_time) over (partition by user_id, session_number) as session_ended_at,\n        min(date_day) over (partition by user_id, session_number) as session_started_on_day,\n        COUNTIF(action_type = 'ViewAction') OVER (partition by user_id, session_number) as page_views,\n        {{ dbt_utils.surrogate_key(['user_id', 'session_number']) }} as session_id\n    from session_numbers\n),\nsession_join as (\n    select\n        session_ids.session_id,\n        session_ids.user_id,\n        session_ids.organization_id,\n        session_ids.session_started_at,\n        session_ids.session_ended_at,\n        session_ids.session_started_on_day,\n        session_ids.page_views\n    from session_ids\n    where session_ids.is_new_session = 1 -- only return fields of first event\n)\nselect\n    session_join.*,\n    {{ dbt_utils.datediff(\"session_started_at\", \"session_ended_at\", 'second') }} as duration,\nfrom session_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.datediff", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.dateadd"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["silver"], "full_refresh": null, "labels": {"layer": "silver"}, "unique_key": "session_id", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "silver", "product", "fct_session"], "unique_id": "model.lumapps_dbt.fct_session", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "silver/product/fct_session.sql", "original_file_path": "models/silver/product/fct_session.sql", "name": "fct_session", "alias": "fct_session", "checksum": {"name": "sha256", "checksum": "0fd5e1ad4023d6529a536fb9659181f09dc5b80fb4023d53c8c96adee232a822"}, "tags": ["silver"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "A list of all the sessions that occured on the platform", "columns": {"session_id": {"name": "session_id", "description": "The id of the session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the associated customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The id of the user that visited the platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_started_on_day": {"name": "session_started_on_day", "description": "The date on which the session started", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_started_at": {"name": "session_started_at", "description": "The datetime when the session started", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_ended_at": {"name": "session_ended_at", "description": "The time when the session ended", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duration": {"name": "duration", "description": "the duration of the session in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_views": {"name": "page_views", "description": "the amount of page views that occured in the session", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/silver/product/product.yml", "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/fct_session.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["silver"], "labels": {"layer": "silver"}, "materialized": "incremental", "unique_key": "session_id"}, "created_at": 1641465608, "compiled_sql": "\n\n-- need to grab all events for relevant users\nwith events as (\n    select\n        action_type,\n        cell,\n        user_id,\n        organization_id,\n        action_time,\n        target_kind,\n        target_id,\n        result_kind,\n        result_id,\n        cast(TIMESTAMP_TRUNC(action_time,day) as date) as date_day\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\n    \n    where action_time > (\n          select\n            \n\n        datetime_add(\n            cast( max(session_started_at) as datetime),\n        interval -3 hour\n        )\n\n\n          from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_session` )\n    \n),\nprevious_event as (\n    select\n        *,\n        lag(action_time) over(partition by user_id order by action_time asc) as previous_event_at\n    from events\n),\nnew_sessions as (\n\n    select\n        *,\n        -- had the previous session timed out?\n        case when \n\n    datetime_diff(\n        cast(action_time as datetime),\n        cast(previous_event_at as datetime),\n        minute\n    )\n\n > 30 or previous_event_at is null then 1\n        else 0 end as is_new_session\n\n    from previous_event\n),\nsession_numbers as (\n\n    select *,\n\n    -- will cumulatively create session numbers\n    sum(is_new_session) over (\n            partition by user_id\n            order by action_time asc\n            rows between unbounded preceding and current row\n            ) as session_number\n\n    from new_sessions\n),\nsession_ids as (\n    select\n        *,\n        min(action_time) over (partition by user_id, session_number) as session_started_at,\n        max(action_time) over (partition by user_id, session_number) as session_ended_at,\n        min(date_day) over (partition by user_id, session_number) as session_started_on_day,\n        COUNTIF(action_type = 'ViewAction') OVER (partition by user_id, session_number) as page_views,\n        to_hex(md5(cast(coalesce(cast(user_id as \n    string\n), '') || '-' || coalesce(cast(session_number as \n    string\n), '') as \n    string\n))) as session_id\n    from session_numbers\n),\nsession_join as (\n    select\n        session_ids.session_id,\n        session_ids.user_id,\n        session_ids.organization_id,\n        session_ids.session_started_at,\n        session_ids.session_ended_at,\n        session_ids.session_started_on_day,\n        session_ids.page_views\n    from session_ids\n    where session_ids.is_new_session = 1 -- only return fields of first event\n)\nselect\n    session_join.*,\n    \n\n    datetime_diff(\n        cast(session_ended_at as datetime),\n        cast(session_started_at as datetime),\n        second\n    )\n\n as duration,\nfrom session_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`fct_session`"}, "model.lumapps_dbt.fct_days_since_last_actions": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        cluster_by = [\"date\", \"organization_id\"],\n        tags=[\"daily\"]\n    )\n}}\n\nSELECT\n  uv.user_id,\n  uv.organization_id,\n  wd.date as date,\n  uv.engagement_level,\n  MIN( DATE_DIFF(wd.date, uv.date, day) ) as days_since_last_action,\n  CURRENT_DATETIME() as _last_dbt_run\nFROM {{ref('all_days')}} AS wd\nCROSS JOIN {{ref('fct_daily_user_activity')}} as uv\n  WHERE wd.date BETWEEN uv.date AND DATE_ADD(uv.date, INTERVAL 30 DAY)\n  AND wd.date < current_date()\n  {% if is_incremental() %}\n  AND wd.date >= (select DATE(max(_last_dbt_run)) from {{ this }})\n  {% endif %}\nGROUP BY 1,2,3,4", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.lumapps_dbt.all_days", "model.lumapps_dbt.fct_daily_user_activity"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["silver", "daily"], "full_refresh": null, "labels": {"layer": "silver"}, "cluster_by": ["date", "organization_id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "silver", "product", "fct_days_since_last_actions"], "unique_id": "model.lumapps_dbt.fct_days_since_last_actions", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "silver/product/fct_days_since_last_actions.sql", "original_file_path": "models/silver/product/fct_days_since_last_actions.sql", "name": "fct_days_since_last_actions", "alias": "fct_days_since_last_actions", "checksum": {"name": "sha256", "checksum": "a490475cfbc7b66fd3b540e02370c87139ba3922b127dfaa95e0d633dd4a9e7d"}, "tags": ["silver", "daily"], "refs": [["all_days"], ["fct_daily_user_activity"]], "sources": [], "description": "Every day, the amount of time since the last action for a given user", "columns": {"user_id": {"name": "user_id", "description": "The id of the user that visited the platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the associated customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date": {"name": "date", "description": "The current date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_since_last_action": {"name": "days_since_last_action", "description": "The amount of days since last action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "engagement_level": {"name": "engagement_level", "description": "Number of day since an action in the engagement level:\n- Visitor: number of day since when the user only viewed pages during the day\n- Participant: number of day since when the user created comments and liked items during the day\n- Contributor: number of day since when the user created posts and content that day\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/silver/product/product.yml", "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/fct_days_since_last_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["daily"], "labels": {"layer": "silver"}, "materialized": "incremental", "cluster_by": ["date", "organization_id"]}, "created_at": 1641465608, "compiled_sql": "\n\nSELECT\n  uv.user_id,\n  uv.organization_id,\n  wd.date as date,\n  uv.engagement_level,\n  MIN( DATE_DIFF(wd.date, uv.date, day) ) as days_since_last_action,\n  CURRENT_DATETIME() as _last_dbt_run\nFROM `lumapps-fivetran`.`dbt_lumapps_dev`.`all_days` AS wd\nCROSS JOIN `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_daily_user_activity` as uv\n  WHERE wd.date BETWEEN uv.date AND DATE_ADD(uv.date, INTERVAL 30 DAY)\n  AND wd.date < current_date()\n  \n  AND wd.date >= (select DATE(max(_last_dbt_run)) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions`)\n  \nGROUP BY 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions`"}, "model.lumapps_dbt.dim_content_types": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"],\n  )\n}}\n\nselect\n{{ dbt_utils.star(from=ref('stg_lumapps__custom_content_types'), except=[\"cell\", \"organization_id\"]) }}\nfrom {{ ref('stg_lumapps__custom_content_types') }}\nwhere organization_id = 6254012762423296", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.lumapps_dbt.stg_lumapps__custom_content_types", "model.lumapps_dbt.stg_lumapps__custom_content_types"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["gold"], "full_refresh": null, "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "gold", "airbus", "dim_content_types"], "unique_id": "model.lumapps_dbt.dim_content_types", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "gold/airbus/dim_content_types.sql", "original_file_path": "models/gold/airbus/dim_content_types.sql", "name": "dim_content_types", "alias": "dim_content_types", "checksum": {"name": "sha256", "checksum": "8b97245641855fd7e9a93fa1ea8c67104f6a411907bf5fd7946c8157603fb9c5"}, "tags": ["gold"], "refs": [["stg_lumapps__custom_content_types"], ["stg_lumapps__custom_content_types"]], "sources": [], "description": "Replica of the lumapps custom content types", "columns": {"id": {"name": "id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cell": {"name": "cell", "description": "The environment on which this custom content type belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The platform to which this custom content type belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site_id": {"name": "site_id", "description": "The site to which this custom content type belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the custom content type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Json String of the name of the custom content type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flat_name": {"name": "flat_name", "description": "Extraction of name, en > fr > de", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "the datetime (UTC) at which this custom content type was first saved", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/gold/airbus/airbus.yml", "compiled_path": "target/compiled/lumapps_dbt/models/gold/airbus/dim_content_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["gold"], "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465608, "compiled_sql": "\n\nselect\n`id`,\n  `site_id`,\n  `status`,\n  `name`,\n  `flat_name`,\n  `created_at`\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_lumapps__custom_content_types`\nwhere organization_id = 6254012762423296", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`dim_content_types`"}, "model.lumapps_dbt.dim_sites": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"],\n  )\n}}\n\nselect\n{{ dbt_utils.star(from=ref('stg_lumapps__sites'), except=[\"cell\", \"organization_id\"]) }}\nfrom {{ ref('stg_lumapps__sites') }}\nwhere organization_id = 6254012762423296", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.lumapps_dbt.stg_lumapps__sites", "model.lumapps_dbt.stg_lumapps__sites"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["gold"], "full_refresh": null, "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "gold", "airbus", "dim_sites"], "unique_id": "model.lumapps_dbt.dim_sites", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "gold/airbus/dim_sites.sql", "original_file_path": "models/gold/airbus/dim_sites.sql", "name": "dim_sites", "alias": "dim_sites", "checksum": {"name": "sha256", "checksum": "26ff1bd911c164f10025f5ee4bbe222ae829b6e7ece9b15630714d0840b7f479"}, "tags": ["gold"], "refs": [["stg_lumapps__sites"], ["stg_lumapps__sites"]], "sources": [], "description": "Replica of the lumapps sites for airbus only", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/gold/airbus/airbus.yml", "compiled_path": "target/compiled/lumapps_dbt/models/gold/airbus/dim_sites.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["gold"], "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465608, "compiled_sql": "\n\nselect\n`id`,\n  `status`,\n  `slug`,\n  `title`,\n  `created_at`\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_lumapps__sites`\nwhere organization_id = 6254012762423296", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`dim_sites`"}, "model.lumapps_dbt.fct_user_content_activity": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        cluster_by = [\"date\"],\n        tags=[\"daily\"]\n    )\n}}\nSELECT\nuser_id as user_id,\ncast(target_id as INTEGER) as content_id,\ncast(TIMESTAMP_TRUNC(action_time,day) as date) as date,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'Content') as nb_content_views,\nCOUNTIF(action_type = 'CommentAction' AND target_kind = 'Content') as nb_content_comments,\nCOUNTIF(action_type = 'ReactAction' AND target_kind = 'Content') as nb_content_likes,\nCOUNTIF(action_type = 'FollowAction' AND target_kind = 'Content') as nb_content_follows,\nCOUNTIF(action_type = 'UpdateAction' AND target_kind = 'Content') as nb_content_update,\nCURRENT_DATETIME() as _last_dbt_run\nFROM  {{ref('stg_analytics__user_actions')}}\nWHERE action_time < DATETIME(current_date())\nAND target_kind = \"Content\"\nAND action_type <> \"CreateAction\"\nand action_type <> \"DeleteAction\"\nand organization_id = 6254012762423296\n{% if is_incremental() %}\nAND action_time > (select max(_last_dbt_run) from {{ this }})\n{% endif %}\nGROUP BY 1, 2, 3", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["gold", "daily"], "full_refresh": null, "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "cluster_by": ["date"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "gold", "airbus", "fct_user_content_activity"], "unique_id": "model.lumapps_dbt.fct_user_content_activity", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "gold/airbus/fct_user_content_activity.sql", "original_file_path": "models/gold/airbus/fct_user_content_activity.sql", "name": "fct_user_content_activity", "alias": "fct_user_content_activity", "checksum": {"name": "sha256", "checksum": "a1a8b3d85ee0841f0f75df7d3eaee5158f359b975a1aea943c480a0320f6e974"}, "tags": ["gold", "daily"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "Daily activity per user per content", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/gold/airbus/airbus.yml", "compiled_path": "target/compiled/lumapps_dbt/models/gold/airbus/fct_user_content_activity.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["daily"], "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "materialized": "incremental", "cluster_by": ["date"]}, "created_at": 1641465608, "compiled_sql": "\nSELECT\nuser_id as user_id,\ncast(target_id as INTEGER) as content_id,\ncast(TIMESTAMP_TRUNC(action_time,day) as date) as date,\nCOUNTIF(action_type = 'ViewAction' AND target_kind = 'Content') as nb_content_views,\nCOUNTIF(action_type = 'CommentAction' AND target_kind = 'Content') as nb_content_comments,\nCOUNTIF(action_type = 'ReactAction' AND target_kind = 'Content') as nb_content_likes,\nCOUNTIF(action_type = 'FollowAction' AND target_kind = 'Content') as nb_content_follows,\nCOUNTIF(action_type = 'UpdateAction' AND target_kind = 'Content') as nb_content_update,\nCURRENT_DATETIME() as _last_dbt_run\nFROM  `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\nWHERE action_time < DATETIME(current_date())\nAND target_kind = \"Content\"\nAND action_type <> \"CreateAction\"\nand action_type <> \"DeleteAction\"\nand organization_id = 6254012762423296\n\nAND action_time > (select max(_last_dbt_run) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_user_content_activity`)\n\nGROUP BY 1, 2, 3", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`fct_user_content_activity`"}, "model.lumapps_dbt.dim_contents": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"],\n  )\n}}\n\nselect\n{{ dbt_utils.star(from=ref('stg_lumapps__contents'), except=[\"cell\", \"organization_id\"]) }}\nfrom {{ ref('stg_lumapps__contents') }}\nwhere organization_id = 6254012762423296", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.lumapps_dbt.stg_lumapps__contents", "model.lumapps_dbt.stg_lumapps__contents"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["gold"], "full_refresh": null, "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "gold", "airbus", "dim_contents"], "unique_id": "model.lumapps_dbt.dim_contents", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "gold/airbus/dim_contents.sql", "original_file_path": "models/gold/airbus/dim_contents.sql", "name": "dim_contents", "alias": "dim_contents", "checksum": {"name": "sha256", "checksum": "55e35b70700d53f6eec506533f83d2b8a51a942814bf52f54fff96e5ea048f33"}, "tags": ["gold"], "refs": [["stg_lumapps__contents"], ["stg_lumapps__contents"]], "sources": [], "description": "Replica of the lumapps contents for airbus only", "columns": {"id": {"name": "id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The platform to which this content belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site_id": {"name": "site_id", "description": "The site to which this content belons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_type_id": {"name": "content_type_id", "description": "The content_type of the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "The title of the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by": {"name": "created_by", "description": "the user who created the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "the datetime (UTC) at which this content was first saved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "the datetime (UTC) at which the content was published. It can be overriden in content settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/gold/airbus/airbus.yml", "compiled_path": "target/compiled/lumapps_dbt/models/gold/airbus/dim_contents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["gold"], "labels": {"layer": "gold"}, "meta": {"roles": ["airbus-viewer"]}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465608, "compiled_sql": "\n\nselect\n`id`,\n  `site_id`,\n  `status`,\n  `content_type_id`,\n  `title`,\n  `flat_title`,\n  `created_by_id`,\n  `created_at`,\n  `published_at`\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_lumapps__contents`\nwhere organization_id = 6254012762423296", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`dim_contents`"}, "model.lumapps_dbt.dim_lumapps_platform": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n  )\n}}\n\nselect\n    lp.salesforce_account_id,\n    a.industry,\n    lp.organization_id,\n    lp.platform_name,\n    a.organization_name,\n    lp.csm_owner,\n    lp.status,\n    lp.collab_suite,\n    lp.license_type,\n    lp.go_live_date,\n    a.arr,\n    a.region,\n    a.sub_region,\n    a.sales_rep,\n    a.purchased_licenses\nfrom {{ ref('stg_salesforce__lumapps_platform') }} as lp\nleft join {{ ref('stg_salesforce__account') }} as a on lp.salesforce_account_id = a.id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.lumapps_dbt.stg_salesforce__lumapps_platform", "model.lumapps_dbt.stg_salesforce__account"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["gold"], "full_refresh": null, "labels": {"layer": "gold"}, "meta": {"roles": ["customer-success-viewer", "customer-success-admin"]}, "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "gold", "customer-success", "dim_lumapps_platform"], "unique_id": "model.lumapps_dbt.dim_lumapps_platform", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "gold/customer-success/dim_lumapps_platform.sql", "original_file_path": "models/gold/customer-success/dim_lumapps_platform.sql", "name": "dim_lumapps_platform", "alias": "dim_lumapps_platform", "checksum": {"name": "sha256", "checksum": "1d5b799a45de96d47117cb217e130342db852308a4cdb87683c0579138ee2509"}, "tags": ["gold"], "refs": [["stg_salesforce__lumapps_platform"], ["stg_salesforce__account"]], "sources": [], "description": "Dimension on the lumapps platform. A salesforce account can have multiple platforms.\n", "columns": {"salesforce_account_id": {"name": "salesforce_account_id", "description": "the id in salesforce for that customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "An industry associated with this account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The organization id of the account in the Lumapps product", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The region associated with this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_region": {"name": "sub_region", "description": "The sub region associated with this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_rep": {"name": "sales_rep", "description": "The sales rep in charge of this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arr": {"name": "arr", "description": "The Annual Recurring Revenue this customer brings", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchased_licenses": {"name": "purchased_licenses", "description": "the number of licenses the customer purchased", "meta": {}, "data_type": null, "quote": null, "tags": []}, "license_type": {"name": "license_type", "description": "the type of licenses the customer bought", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collab_suite": {"name": "collab_suite", "description": "Whether the customer is using Gsuite or O365", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "the status of the platform in lumapps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zendesk_organization_id": {"name": "zendesk_organization_id", "description": "the id of the account in Zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csm_owner": {"name": "csm_owner", "description": "the Customer Success manager in charge of this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "A human readable name for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_name": {"name": "platform_name", "description": "A human readable name for the platform (usually <organization_name>-<license_type>)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "go_live_date": {"name": "go_live_date", "description": "The Go-Live date", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/gold/customer-success/customer-success.yml", "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/dim_lumapps_platform.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["gold"], "labels": {"layer": "gold"}, "meta": {"roles": ["customer-success-viewer", "customer-success-admin"]}, "materialized": "table"}, "created_at": 1641465608, "compiled_sql": "\n\nselect\n    lp.salesforce_account_id,\n    a.industry,\n    lp.organization_id,\n    lp.platform_name,\n    a.organization_name,\n    lp.csm_owner,\n    lp.status,\n    lp.collab_suite,\n    lp.license_type,\n    lp.go_live_date,\n    a.arr,\n    a.region,\n    a.sub_region,\n    a.sales_rep,\n    a.purchased_licenses\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__lumapps_platform` as lp\nleft join `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__account` as a on lp.salesforce_account_id = a.id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`dim_lumapps_platform`"}, "model.lumapps_dbt.fct_organization_adoption": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        cluster_by = [\"date\", \"organization_id\"],\n        tags=[\"daily\"]\n    )\n}}\n\nwith active_visitors as (\n    SELECT\n    fdsla.date,\n    fdsla.organization_id,\n    COUNTIF(fdsla.days_since_last_action < 1) as daily_active_visitors,\n    COUNTIF(fdsla.days_since_last_action < 7) as weekly_active_visitors,\n    COUNTIF(fdsla.days_since_last_action < 28) as monthly_active_visitors,\n    FROM {{ref('fct_days_since_last_actions')}} fdsla\n    WHERE engagement_level = 'visitor'\n    AND fdsla.date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    {% if is_incremental() %}\n    AND fdsla.date >= (select date(max(_last_dbt_run)) from {{ this }})\n    {% endif %}\n    GROUP BY 1,2\n),\nactive_participants as (\n    SELECT\n    fdsla.date,\n    fdsla.organization_id,\n    COUNTIF(fdsla.days_since_last_action < 1) as daily_active_participants,\n    COUNTIF(fdsla.days_since_last_action < 7) as weekly_active_participants,\n    COUNTIF(fdsla.days_since_last_action < 28) as monthly_active_participants,\n    FROM {{ref('fct_days_since_last_actions')}} fdsla\n    WHERE engagement_level = 'participant'\n    AND fdsla.date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    {% if is_incremental() %}\n    AND fdsla.date >= (select date(max(_last_dbt_run)) from {{ this }})\n    {% endif %}\n    GROUP BY 1,2\n),\nactive_contributors as (\n    SELECT\n    fdsla.date,\n    fdsla.organization_id,\n    COUNTIF(fdsla.days_since_last_action < 1) as daily_active_contributors,\n    COUNTIF(fdsla.days_since_last_action < 7) as weekly_active_contributors,\n    COUNTIF(fdsla.days_since_last_action < 28) as monthly_active_contributors,\n    FROM {{ref('fct_days_since_last_actions')}} fdsla\n    WHERE engagement_level = 'contributor'\n    AND fdsla.date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    {% if is_incremental() %}\n    AND fdsla.date >= (select date(max(_last_dbt_run)) from {{ this }})\n    {% endif %}\n    GROUP BY 1,2\n),\ndaily_value_creation as (\n    SELECT\n    fdua.date,\n    fdua.organization_id,\n    sum(fdua.nb_contents) as nb_contents_created,\n    sum(fdua.nb_posts) as nb_posts_created,\n    sum(fdua.nb_content_views) as nb_content_views,\n    sum(fdua.nb_community_views) as nb_community_views,\n    sum(fdua.nb_community_likes) as nb_likes_in_communities,\n    sum(fdua.nb_content_likes) as nb_likes_on_contents\n    FROM {{ref('fct_daily_user_activity')}} fdua\n    WHERE date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    {% if is_incremental() %}\n    AND date >= (select date(max(_last_dbt_run)) from {{ this }})\n    {% endif %}\n    GROUP BY 1,2\n),\nsession_kpis as (\n    select\n    session_started_on_day as date_day,\n    organization_id,\n    avg(duration) as session_avg_duration,\n    avg(page_views) as session_avg_page_views,\n    count(session_id) as session_count\n    from\n    {{ref('fct_session')}}\n    group by 1,2\n),\ninter_table as (\nSELECT\nad.date as date,\nsa.organization_id,\nCOALESCE(av.daily_active_visitors, 0) as daily_active_visitors,\nCOALESCE(av.weekly_active_visitors, 0) as weekly_active_visitors,\nCOALESCE(av.monthly_active_visitors,0) as monthly_active_visitors,\nCOALESCE(ap.daily_active_participants,0) as daily_active_participants,\nCOALESCE(ap.weekly_active_participants,0) as weekly_active_participants,\nCOALESCE(ap.monthly_active_participants,0) as monthly_active_participants,\nCOALESCE(ac.daily_active_contributors,0) as daily_active_contributors,\nCOALESCE(ac.weekly_active_contributors,0) as weekly_active_contributors,\nCOALESCE(ac.monthly_active_contributors,0) as monthly_active_contributors,\nCOALESCE(dvc.nb_contents_created,0) as nb_contents_created,\nCOALESCE(dvc.nb_posts_created,0) as nb_posts_created,\nCOALESCE(dvc.nb_content_views,0) as nb_content_views,\nCOALESCE(dvc.nb_community_views,0) as nb_community_views,\nCOALESCE(dvc.nb_likes_in_communities,0) as nb_likes_in_communities,\nCOALESCE(dvc.nb_likes_on_contents,0) as nb_likes_on_contents,\nCOALESCE(av.daily_active_visitors,0) + COALESCE(ap.daily_active_participants,0) + COALESCE(ac.daily_active_contributors,0) as daily_active_users,\nCOALESCE(av.weekly_active_visitors,0) + COALESCE(ap.weekly_active_participants,0) + COALESCE(ac.weekly_active_contributors,0) as weekly_active_users,\nCOALESCE(av.monthly_active_visitors,0) + COALESCE(ap.monthly_active_participants,0) + COALESCE(ac.monthly_active_contributors,0) as monthly_active_users,\nCOALESCE(sk.session_avg_duration, 0) as session_avg_duration,\nCOALESCE(sk.session_avg_page_views, 0) as session_avg_page_views,\nsk.session_count,\nCURRENT_DATETIME() as _last_dbt_run\nFROM {{ref('all_days')}} ad\nCROSS JOIN {{ ref('stg_salesforce__lumapps_platform')}} sa\nLEFT JOIN session_kpis sk ON ad.date = sk.date_day AND sa.organization_id= sk.organization_id\nLEFT JOIN active_visitors av ON av.date = ad.date AND av.organization_id = sa.organization_id\nLEFT JOIN active_participants ap ON ad.date = ap.date AND ap.organization_id = sa.organization_id\nLEFT JOIN active_contributors ac ON ad.date = ac.date AND ac.organization_id = sa.organization_id\nLEFT JOIN daily_value_creation dvc ON ad.date = dvc.date AND dvc.organization_id = sa.organization_id\nWHERE sa.organization_id IS NOT NULL\nAND ad.date < current_date()\n)\nSELECT\ninter_table.*,\nCASE WHEN daily_active_users = 0 then 0 else session_avg_duration * session_count / daily_active_users END as avg_daily_time,\nFROM inter_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_daily_user_activity", "model.lumapps_dbt.fct_session", "model.lumapps_dbt.all_days", "model.lumapps_dbt.stg_salesforce__lumapps_platform"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["gold", "daily"], "full_refresh": null, "labels": {"layer": "gold"}, "meta": {"roles": ["customer-success-viewer", "customer-success-admin"]}, "cluster_by": ["date", "organization_id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "gold", "customer-success", "fct_organization_adoption"], "unique_id": "model.lumapps_dbt.fct_organization_adoption", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "gold/customer-success/fct_organization_adoption.sql", "original_file_path": "models/gold/customer-success/fct_organization_adoption.sql", "name": "fct_organization_adoption", "alias": "fct_organization_adoption", "checksum": {"name": "sha256", "checksum": "547ceccbe1c55093a736c67b459ada84a52d9a0c09b2cd2d2b5338409ff34a2a"}, "tags": ["gold", "daily"], "refs": [["fct_days_since_last_actions"], ["fct_days_since_last_actions"], ["fct_days_since_last_actions"], ["fct_daily_user_activity"], ["fct_session"], ["all_days"], ["stg_salesforce__lumapps_platform"]], "sources": [], "description": "Key KPIs to follow the adoption of the product in organizations", "columns": {"date": {"name": "date", "description": "The current date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the associated customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_active_users": {"name": "daily_active_users", "description": "The amount of users that connected on this date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_active_users": {"name": "weekly_active_users", "description": "The amount of users that connected on the past 7 days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_users": {"name": "monthly_active_users", "description": "The amount of users that connected on the past 30 days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_active_visitors": {"name": "daily_active_visitors", "description": "The amount of users that connected on this date to only view pages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_active_visitors": {"name": "weekly_active_visitors", "description": "The amount of users that connected on the past 7 days to only view pages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_visitors": {"name": "monthly_active_visitors", "description": "The amount of users that connected on the past 30 days to only view pages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_active_participants": {"name": "daily_active_participants", "description": "The amount of users that connected on this date and liked or comment contents", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_active_participants": {"name": "weekly_active_participants", "description": "The amount of users that connected on the past 7 days and liked or comment contents", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_participants": {"name": "monthly_active_participants", "description": "The amount of users that connected on the past 30 days and liked or comment contents", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_active_contributors": {"name": "daily_active_contributors", "description": "The amount of users that connected on this date and created a post or a content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_active_contributors": {"name": "weekly_active_contributors", "description": "The amount of users that connected on the past 7 days and created a post or a content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_active_contributors": {"name": "monthly_active_contributors", "description": "The amount of users that connected on the past 30 days and created a post or a content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_contents_created": {"name": "nb_contents_created", "description": "number of content created on that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_posts_created": {"name": "nb_posts_created", "description": "number of posts created on that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_content_views": {"name": "nb_content_views", "description": "number of content display on the platform for that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_community_views": {"name": "nb_community_views", "description": "number of community and post display on the platform for that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_likes_in_communities": {"name": "nb_likes_in_communities", "description": "number of likes in a community context for that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nb_likes_on_contents": {"name": "nb_likes_on_contents", "description": "number of likes on contents for that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_avg_duration": {"name": "session_avg_duration", "description": "average session duration on that day in seconds", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_avg_page_views": {"name": "session_avg_page_views", "description": "average number of page views per session that day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_count": {"name": "session_count", "description": "number of sessions that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_daily_time": {"name": "avg_daily_time", "description": "average number of time spent by users who connected that day in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_last_dbt_run": {"name": "_last_dbt_run", "description": "internal info used to build incremental refresh of the table.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/gold/customer-success/customer-success.yml", "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/fct_organization_adoption.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["daily"], "labels": {"layer": "gold"}, "meta": {"roles": ["customer-success-viewer", "customer-success-admin"]}, "materialized": "incremental", "cluster_by": ["date", "organization_id"]}, "created_at": 1641465608, "compiled_sql": "\n\nwith active_visitors as (\n    SELECT\n    fdsla.date,\n    fdsla.organization_id,\n    COUNTIF(fdsla.days_since_last_action < 1) as daily_active_visitors,\n    COUNTIF(fdsla.days_since_last_action < 7) as weekly_active_visitors,\n    COUNTIF(fdsla.days_since_last_action < 28) as monthly_active_visitors,\n    FROM `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions` fdsla\n    WHERE engagement_level = 'visitor'\n    AND fdsla.date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    \n    AND fdsla.date >= (select date(max(_last_dbt_run)) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`)\n    \n    GROUP BY 1,2\n),\nactive_participants as (\n    SELECT\n    fdsla.date,\n    fdsla.organization_id,\n    COUNTIF(fdsla.days_since_last_action < 1) as daily_active_participants,\n    COUNTIF(fdsla.days_since_last_action < 7) as weekly_active_participants,\n    COUNTIF(fdsla.days_since_last_action < 28) as monthly_active_participants,\n    FROM `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions` fdsla\n    WHERE engagement_level = 'participant'\n    AND fdsla.date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    \n    AND fdsla.date >= (select date(max(_last_dbt_run)) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`)\n    \n    GROUP BY 1,2\n),\nactive_contributors as (\n    SELECT\n    fdsla.date,\n    fdsla.organization_id,\n    COUNTIF(fdsla.days_since_last_action < 1) as daily_active_contributors,\n    COUNTIF(fdsla.days_since_last_action < 7) as weekly_active_contributors,\n    COUNTIF(fdsla.days_since_last_action < 28) as monthly_active_contributors,\n    FROM `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions` fdsla\n    WHERE engagement_level = 'contributor'\n    AND fdsla.date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    \n    AND fdsla.date >= (select date(max(_last_dbt_run)) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`)\n    \n    GROUP BY 1,2\n),\ndaily_value_creation as (\n    SELECT\n    fdua.date,\n    fdua.organization_id,\n    sum(fdua.nb_contents) as nb_contents_created,\n    sum(fdua.nb_posts) as nb_posts_created,\n    sum(fdua.nb_content_views) as nb_content_views,\n    sum(fdua.nb_community_views) as nb_community_views,\n    sum(fdua.nb_community_likes) as nb_likes_in_communities,\n    sum(fdua.nb_content_likes) as nb_likes_on_contents\n    FROM `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_daily_user_activity` fdua\n    WHERE date < current_date()  -- We don't want to compute KPI from today as the day is not over.\n    \n    AND date >= (select date(max(_last_dbt_run)) from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`)\n    \n    GROUP BY 1,2\n),\nsession_kpis as (\n    select\n    session_started_on_day as date_day,\n    organization_id,\n    avg(duration) as session_avg_duration,\n    avg(page_views) as session_avg_page_views,\n    count(session_id) as session_count\n    from\n    `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_session`\n    group by 1,2\n),\ninter_table as (\nSELECT\nad.date as date,\nsa.organization_id,\nCOALESCE(av.daily_active_visitors, 0) as daily_active_visitors,\nCOALESCE(av.weekly_active_visitors, 0) as weekly_active_visitors,\nCOALESCE(av.monthly_active_visitors,0) as monthly_active_visitors,\nCOALESCE(ap.daily_active_participants,0) as daily_active_participants,\nCOALESCE(ap.weekly_active_participants,0) as weekly_active_participants,\nCOALESCE(ap.monthly_active_participants,0) as monthly_active_participants,\nCOALESCE(ac.daily_active_contributors,0) as daily_active_contributors,\nCOALESCE(ac.weekly_active_contributors,0) as weekly_active_contributors,\nCOALESCE(ac.monthly_active_contributors,0) as monthly_active_contributors,\nCOALESCE(dvc.nb_contents_created,0) as nb_contents_created,\nCOALESCE(dvc.nb_posts_created,0) as nb_posts_created,\nCOALESCE(dvc.nb_content_views,0) as nb_content_views,\nCOALESCE(dvc.nb_community_views,0) as nb_community_views,\nCOALESCE(dvc.nb_likes_in_communities,0) as nb_likes_in_communities,\nCOALESCE(dvc.nb_likes_on_contents,0) as nb_likes_on_contents,\nCOALESCE(av.daily_active_visitors,0) + COALESCE(ap.daily_active_participants,0) + COALESCE(ac.daily_active_contributors,0) as daily_active_users,\nCOALESCE(av.weekly_active_visitors,0) + COALESCE(ap.weekly_active_participants,0) + COALESCE(ac.weekly_active_contributors,0) as weekly_active_users,\nCOALESCE(av.monthly_active_visitors,0) + COALESCE(ap.monthly_active_participants,0) + COALESCE(ac.monthly_active_contributors,0) as monthly_active_users,\nCOALESCE(sk.session_avg_duration, 0) as session_avg_duration,\nCOALESCE(sk.session_avg_page_views, 0) as session_avg_page_views,\nsk.session_count,\nCURRENT_DATETIME() as _last_dbt_run\nFROM `lumapps-fivetran`.`dbt_lumapps_dev`.`all_days` ad\nCROSS JOIN `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__lumapps_platform` sa\nLEFT JOIN session_kpis sk ON ad.date = sk.date_day AND sa.organization_id= sk.organization_id\nLEFT JOIN active_visitors av ON av.date = ad.date AND av.organization_id = sa.organization_id\nLEFT JOIN active_participants ap ON ad.date = ap.date AND ap.organization_id = sa.organization_id\nLEFT JOIN active_contributors ac ON ad.date = ac.date AND ac.organization_id = sa.organization_id\nLEFT JOIN daily_value_creation dvc ON ad.date = dvc.date AND dvc.organization_id = sa.organization_id\nWHERE sa.organization_id IS NOT NULL\nAND ad.date < current_date()\n)\nSELECT\ninter_table.*,\nCASE WHEN daily_active_users = 0 then 0 else session_avg_duration * session_count / daily_active_users END as avg_daily_time,\nFROM inter_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`"}, "model.lumapps_dbt.stg_lumapps__sites": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"],\n  )\n}}\n\nWITH sites_revision as (\nSELECT\ncell_id as cell,\nCAST(organization_id as INTEGER) as organization_id,\nCAST(uid as INTEGER) as id,\nslug,\nstatus,\ncreated_at,\ntitle,\nROW_NUMBER() OVER(PARTITION BY uid ORDER BY _inserted_at desc) AS neg_revision  -- latest version has neg_revision = 1\nFROM  {{ source('analytics', 'sites') }}\n)\nselect id, cell, organization_id, status, slug, title, created_at from sites_revision\nwhere neg_revision = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.analytics.sites"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "analytics", "stg_lumapps__sites"], "unique_id": "model.lumapps_dbt.stg_lumapps__sites", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/analytics/stg_lumapps__sites.sql", "original_file_path": "models/bronze/analytics/stg_lumapps__sites.sql", "name": "stg_lumapps__sites", "alias": "stg_lumapps__sites", "checksum": {"name": "sha256", "checksum": "2bf36c6523a3b53fcb7afae91237e8cef6763024e14827f35867349c44ffd4c4"}, "tags": ["bronze"], "refs": [], "sources": [["analytics", "sites"]], "description": "Replica of the lumapps sites", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/analytics/stg_analytics.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_lumapps__sites.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465609, "compiled_sql": "\n\nWITH sites_revision as (\nSELECT\ncell_id as cell,\nCAST(organization_id as INTEGER) as organization_id,\nCAST(uid as INTEGER) as id,\nslug,\nstatus,\ncreated_at,\ntitle,\nROW_NUMBER() OVER(PARTITION BY uid ORDER BY _inserted_at desc) AS neg_revision  -- latest version has neg_revision = 1\nFROM  `lumapps-fivetran`.`analytics`.`sites`\n)\nselect id, cell, organization_id, status, slug, title, created_at from sites_revision\nwhere neg_revision = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_lumapps__sites`"}, "model.lumapps_dbt.stg_analytics__user_actions": {"raw_sql": "{{\n  config(\n    materialized = \"incremental\",\n    cluster_by = [\"action_time\", \"organization_id\", \"action_type\"],\n  )\n}}\n\nselect\naction_type,\ncell_id as cell,\nagent_id as user_id,\ncountry,\ncity,\nJSON_EXTRACT_SCALAR(result,\"$.key.uid\") as result_id,\nJSON_EXTRACT_SCALAR(result,\"$.key.kind\") as result_kind,\nJSON_EXTRACT_SCALAR(target,\"$.key.uid\") as target_id,\nJSON_EXTRACT_SCALAR(target,\"$.key.kind\") as target_kind,\nstart_time as action_time,\nCAST(organization_id as INTEGER) as organization_id\nfrom {{ source('analytics', 'user_actions') }}\nwhere start_time >= '2020-09-01'\n{% if is_incremental() %}\nand start_time > (select max(action_time) from {{ this }})\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.lumapps_dbt.analytics.user_actions"]}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["action_time", "organization_id", "action_type"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "analytics", "stg_analytics__user_actions"], "unique_id": "model.lumapps_dbt.stg_analytics__user_actions", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/analytics/stg_analytics__user_actions.sql", "original_file_path": "models/bronze/analytics/stg_analytics__user_actions.sql", "name": "stg_analytics__user_actions", "alias": "stg_analytics__user_actions", "checksum": {"name": "sha256", "checksum": "379804aa8c6038b08ab3b55689d3a0c1dbc9d80c14b8f6fb70ffda4d821305e6"}, "tags": ["bronze"], "refs": [], "sources": [["analytics", "user_actions"]], "description": "Granular events that occured on the platform.", "columns": {"action_type": {"name": "action_type", "description": "The type of action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cell": {"name": "cell", "description": "The environment on which the event occured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The id of the user that performed the action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country infered from the IP address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city infered from the IP address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_kind": {"name": "result_kind", "description": "The result kind if the action have a result, else null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "result_id": {"name": "result_id", "description": "The result id if the action have a result, else null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_kind": {"name": "target_kind", "description": "The target kind if the action have a target, else null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_id": {"name": "target_id", "description": "The target id if the action have a target, else null", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_time": {"name": "action_time", "description": "The time at which the event occured (UTC)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the associated customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/analytics/stg_analytics.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_analytics__user_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "incremental", "cluster_by": ["action_time", "organization_id", "action_type"]}, "created_at": 1641465609, "compiled_sql": "\n\nselect\naction_type,\ncell_id as cell,\nagent_id as user_id,\ncountry,\ncity,\nJSON_EXTRACT_SCALAR(result,\"$.key.uid\") as result_id,\nJSON_EXTRACT_SCALAR(result,\"$.key.kind\") as result_kind,\nJSON_EXTRACT_SCALAR(target,\"$.key.uid\") as target_id,\nJSON_EXTRACT_SCALAR(target,\"$.key.kind\") as target_kind,\nstart_time as action_time,\nCAST(organization_id as INTEGER) as organization_id\nfrom `lumapps-fivetran`.`analytics`.`user_actions`\nwhere start_time >= '2020-09-01'\n\nand start_time > (select max(action_time) from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`"}, "model.lumapps_dbt.stg_lumapps__custom_content_types": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"],\n  )\n}}\n\nWITH cct_revision as (\nSELECT\ncell_id as cell,\nCAST(organization_id as INTEGER) as organization_id,\nCAST(uid as INTEGER) as id,\nCAST(site_id as INTEGER) as site_id,\nstatus,\ncreated_at,\nname,\nCOALESCE(JSON_VALUE(name, \"$.en\"), COALESCE(JSON_VALUE(name, \"$.fr\"), JSON_VALUE(name, \"$.de\"))) as flat_name,\nROW_NUMBER() OVER(PARTITION BY uid ORDER BY _inserted_at desc) AS neg_revision  -- latest version has neg_revision = 1\nFROM  {{ source('analytics', 'custom_content_types') }}\n)\nselect id, cell, organization_id, site_id, status,  name, flat_name, created_at from cct_revision\nwhere neg_revision = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.analytics.custom_content_types"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "analytics", "stg_lumapps__custom_content_types"], "unique_id": "model.lumapps_dbt.stg_lumapps__custom_content_types", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/analytics/stg_lumapps__custom_content_types.sql", "original_file_path": "models/bronze/analytics/stg_lumapps__custom_content_types.sql", "name": "stg_lumapps__custom_content_types", "alias": "stg_lumapps__custom_content_types", "checksum": {"name": "sha256", "checksum": "9f1c66f60f030516561431c50d18ec73e8ab3afefe72d4fb1ff9cd74a3bbdd81"}, "tags": ["bronze"], "refs": [], "sources": [["analytics", "custom_content_types"]], "description": "Replica of the lumapps custom content type", "columns": {"id": {"name": "id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cell": {"name": "cell", "description": "The environment on which this custom content type belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The platform to which this custom content type belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site_id": {"name": "site_id", "description": "The site to which this custom content type belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the custom content type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Json String of the name of the custom content type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flat_name": {"name": "flat_name", "description": "Extraction of name, en > fr > de", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "the datetime (UTC) at which this custom content type was first saved", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/analytics/stg_analytics.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_lumapps__custom_content_types.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465609, "compiled_sql": "\n\nWITH cct_revision as (\nSELECT\ncell_id as cell,\nCAST(organization_id as INTEGER) as organization_id,\nCAST(uid as INTEGER) as id,\nCAST(site_id as INTEGER) as site_id,\nstatus,\ncreated_at,\nname,\nCOALESCE(JSON_VALUE(name, \"$.en\"), COALESCE(JSON_VALUE(name, \"$.fr\"), JSON_VALUE(name, \"$.de\"))) as flat_name,\nROW_NUMBER() OVER(PARTITION BY uid ORDER BY _inserted_at desc) AS neg_revision  -- latest version has neg_revision = 1\nFROM  `lumapps-fivetran`.`analytics`.`custom_content_types`\n)\nselect id, cell, organization_id, site_id, status,  name, flat_name, created_at from cct_revision\nwhere neg_revision = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_lumapps__custom_content_types`"}, "model.lumapps_dbt.stg_lumapps__contents": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"],\n  )\n}}\n\nWITH contents_revision as (\nSELECT\ncell_id as cell,\nCAST(organization_id as INTEGER) as organization_id,\nCAST(uid as INTEGER) as id,\nCAST(site_id as INTEGER) as site_id,\nstatus,\nCAST(content_type_id as INTEGER) as content_type_id,\nCAST(created_by_id as INTEGER) as created_by_id,\ncreated_at,\npublished_at,\ntitle,\nCOALESCE(JSON_VALUE(title, \"$.en\"), COALESCE(JSON_VALUE(title, \"$.fr\"), JSON_VALUE(title, \"$.de\"))) as flat_title,\nROW_NUMBER() OVER(PARTITION BY uid ORDER BY _inserted_at desc) AS neg_revision  -- latest version has neg_revision = 1\nFROM  {{ source('analytics', 'contents') }}\n)\nselect id, cell, organization_id, site_id, status, content_type_id, title, flat_title, created_by_id, created_at, published_at from contents_revision\nwhere neg_revision = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.analytics.contents"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "analytics", "stg_lumapps__contents"], "unique_id": "model.lumapps_dbt.stg_lumapps__contents", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/analytics/stg_lumapps__contents.sql", "original_file_path": "models/bronze/analytics/stg_lumapps__contents.sql", "name": "stg_lumapps__contents", "alias": "stg_lumapps__contents", "checksum": {"name": "sha256", "checksum": "560fef11c66c0c2bdb31c9984b3e6dc1d16c927813a4aab03520abb94c1f869f"}, "tags": ["bronze"], "refs": [], "sources": [["analytics", "contents"]], "description": "Replica of the lumapps contents", "columns": {"id": {"name": "id", "description": "Primary key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cell": {"name": "cell", "description": "The environment on which this content belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The platform to which this content belongs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "site_id": {"name": "site_id", "description": "The site to which this content belons", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "content_type_id": {"name": "content_type_id", "description": "The content_type of the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Json String for the title of the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "flat_title": {"name": "flat_title", "description": "Extraction of title, en > fr > de", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by": {"name": "created_by", "description": "the user who created the content", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "the datetime (UTC) at which this content was first saved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "published_at": {"name": "published_at", "description": "the datetime (UTC) at which the content was published. It can be overriden in content settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/analytics/stg_analytics.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_lumapps__contents.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465609, "compiled_sql": "\n\nWITH contents_revision as (\nSELECT\ncell_id as cell,\nCAST(organization_id as INTEGER) as organization_id,\nCAST(uid as INTEGER) as id,\nCAST(site_id as INTEGER) as site_id,\nstatus,\nCAST(content_type_id as INTEGER) as content_type_id,\nCAST(created_by_id as INTEGER) as created_by_id,\ncreated_at,\npublished_at,\ntitle,\nCOALESCE(JSON_VALUE(title, \"$.en\"), COALESCE(JSON_VALUE(title, \"$.fr\"), JSON_VALUE(title, \"$.de\"))) as flat_title,\nROW_NUMBER() OVER(PARTITION BY uid ORDER BY _inserted_at desc) AS neg_revision  -- latest version has neg_revision = 1\nFROM  `lumapps-fivetran`.`analytics`.`contents`\n)\nselect id, cell, organization_id, site_id, status, content_type_id, title, flat_title, created_by_id, created_at, published_at from contents_revision\nwhere neg_revision = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_lumapps__contents`"}, "model.lumapps_dbt.stg_zendesk__user": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"zendesk_organization_id\"]\n  )\n}}\n\nselect\nid,\nname,\nrole,\nemail,\norganization_id as zendesk_organization_id,\nfrom {{ source('zendesk', 'zendesk_users') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.zendesk.zendesk_users"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["zendesk_organization_id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "zendesk", "stg_zendesk__user"], "unique_id": "model.lumapps_dbt.stg_zendesk__user", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/zendesk/stg_zendesk__user.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk__user.sql", "name": "stg_zendesk__user", "alias": "stg_zendesk__user", "checksum": {"name": "sha256", "checksum": "885e4fbd1b6bab1cba076ac73b1eca4834a06ad484a20e360510ac3c6fc5a641"}, "tags": ["bronze"], "refs": [], "sources": [["zendesk", "zendesk_users"]], "description": "Information about the users in zendesk", "columns": {"id": {"name": "id", "description": "Automatically assigned id when the user is created in zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The user's name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "The user's role. Possible values are 'end-user', 'agent', or 'admin'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The primary email address of this user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zendesk_organization_id": {"name": "zendesk_organization_id", "description": "The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/zendesk/stg_zendesk.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk__user.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["zendesk_organization_id"]}, "created_at": 1641465609, "compiled_sql": "\n\nselect\nid,\nname,\nrole,\nemail,\norganization_id as zendesk_organization_id,\nfrom `lumapps-fivetran`.`zendesk`.`zendesk_users`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__user`"}, "model.lumapps_dbt.stg_zendesk__ticket": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\", \"zendesk_organization_id\"]\n  )\n}}\n\nselect\nid,\ntags,\ntype,\nstatus,\npriority,\nraw_subject,\ndescription,\nrequester_id,\nsubmitter_id,\norganization_id as zendesk_organization_id,\nsatisfaction_rating,\ncreated_at\nfrom {{ source('zendesk', 'zendesk_tickets') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.zendesk.zendesk_tickets"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["id", "zendesk_organization_id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "zendesk", "stg_zendesk__ticket"], "unique_id": "model.lumapps_dbt.stg_zendesk__ticket", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/zendesk/stg_zendesk__ticket.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk__ticket.sql", "name": "stg_zendesk__ticket", "alias": "stg_zendesk__ticket", "checksum": {"name": "sha256", "checksum": "abb5eb3d8427916ac4a12ae30a99411fbf42ce48adce694443a92041ef32a929"}, "tags": ["bronze"], "refs": [], "sources": [["zendesk", "zendesk_tickets"]], "description": "Information about tickets in zendesk", "columns": {"id": {"name": "id", "description": "Automatically assigned id when the ticket is created in Zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "An array of tags to add to the ticket.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Allowed values are 'problem', 'incident', 'question', or 'task'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Allowed values are \"open\", \"pending\", \"hold\", \"solved\", \"closed\", \"new\" or \"deleted\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Allowed values are \"urgent\", \"high\", \"normal\", or \"low\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "raw_subject": {"name": "raw_subject", "description": "The dynamic content placeholder, if present, or the \"subject\" value, if not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zendesk_organization_id": {"name": "zendesk_organization_id", "description": "The organization of the requester. You can only specify the ID of an organization associated with the requester.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "satisfaction_rating": {"name": "satisfaction_rating", "description": "The satisfaction rating of the ticket, if it exists, or the state of satisfaction, \"offered\" or \"unoffered\".", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/zendesk/stg_zendesk.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk__ticket.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["id", "zendesk_organization_id"]}, "created_at": 1641465609, "compiled_sql": "\n\nselect\nid,\ntags,\ntype,\nstatus,\npriority,\nraw_subject,\ndescription,\nrequester_id,\nsubmitter_id,\norganization_id as zendesk_organization_id,\nsatisfaction_rating,\ncreated_at\nfrom `lumapps-fivetran`.`zendesk`.`zendesk_tickets`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`"}, "model.lumapps_dbt.stg_zendesk__ticket_metric": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"ticket_id\"]\n  )\n}}\n\nselect\nreopens,\nreplies,\nassigned_at,\nupdated_at,\nsolved_at,\nassignee_stations,\nreply_time_in_minutes,\non_hold_time_in_minutes,\nagent_wait_time_in_minutes,\nrequester_wait_time_in_minutes,\nfull_resolution_time_in_minutes,\nfirst_resolution_time_in_minutes,\nticket_id,\nfrom {{ source('zendesk', 'zendesk_ticket_metrics') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.zendesk.zendesk_ticket_metrics"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["ticket_id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "zendesk", "stg_zendesk__ticket_metric"], "unique_id": "model.lumapps_dbt.stg_zendesk__ticket_metric", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/zendesk/stg_zendesk__ticket_metric.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk__ticket_metric.sql", "name": "stg_zendesk__ticket_metric", "alias": "stg_zendesk__ticket_metric", "checksum": {"name": "sha256", "checksum": "bffb636b70b34ed41aa558f4f1ac866e4370c3635cd1a2a05d5a3c5985ceb4a1"}, "tags": ["bronze"], "refs": [], "sources": [["zendesk", "zendesk_ticket_metrics"]], "description": "Metrics about tickets (time to respond, nbr of exchange)", "columns": {"reopens": {"name": "reopens", "description": "Total number of times the ticket was reopened", "meta": {}, "data_type": null, "quote": null, "tags": []}, "replies": {"name": "replies", "description": "The number of public replies added to a ticket by an agent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assigned_at": {"name": "assigned_at", "description": "When the ticket was assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the record was last updated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "solved_at": {"name": "solved_at", "description": "When the ticket was solved", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_stations": {"name": "assignee_stations", "description": "Number of assignees the ticket had", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reply_time_in_minutes": {"name": "reply_time_in_minutes", "description": "Number of minutes to the first reply during calendar and business hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "on_hold_time_in_minutes": {"name": "on_hold_time_in_minutes", "description": "Number of minutes on hold", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agent_wait_time_in_minutes": {"name": "agent_wait_time_in_minutes", "description": "Number of minutes the agent spent waiting during calendar and business hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "requester_wait_time_in_minutes": {"name": "requester_wait_time_in_minutes", "description": "Number of minutes the requester spent waiting during calendar and business hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_resolution_time_in_minutes": {"name": "full_resolution_time_in_minutes", "description": "Number of minutes to the full resolution during calendar and business hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_resolution_time_in_minutes": {"name": "first_resolution_time_in_minutes", "description": "Number of minutes to the first resolution time during calendar and business hours", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "Id of the associated ticket", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/zendesk/stg_zendesk.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk__ticket_metric.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["ticket_id"]}, "created_at": 1641465609, "compiled_sql": "\n\nselect\nreopens,\nreplies,\nassigned_at,\nupdated_at,\nsolved_at,\nassignee_stations,\nreply_time_in_minutes,\non_hold_time_in_minutes,\nagent_wait_time_in_minutes,\nrequester_wait_time_in_minutes,\nfull_resolution_time_in_minutes,\nfirst_resolution_time_in_minutes,\nticket_id,\nfrom `lumapps-fivetran`.`zendesk`.`zendesk_ticket_metrics`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket_metric`"}, "model.lumapps_dbt.stg_zendesk__organization": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n    cluster_by = [\"id\"]\n  )\n}}\n\n\nSELECT\nid,\nname AS account_name,\ntags AS tags,\nfrom {{ source('zendesk', 'zendesk_organizations') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.zendesk.zendesk_organizations"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "cluster_by": ["id"], "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "zendesk", "stg_zendesk__organization"], "unique_id": "model.lumapps_dbt.stg_zendesk__organization", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/zendesk/stg_zendesk__organization.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk__organization.sql", "name": "stg_zendesk__organization", "alias": "stg_zendesk__organization", "checksum": {"name": "sha256", "checksum": "69d2a764cc071508ad9dafb609ea25be3edfb74af2fb9e95f793c07be1e812ca"}, "tags": ["bronze"], "refs": [], "sources": [["zendesk", "zendesk_organizations"]], "description": "Information about the organizations in zendesk", "columns": {"id": {"name": "id", "description": "Automatically assigned id when the organization is created in Zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "A unique name for the organization in Zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "The tags of the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/zendesk/stg_zendesk.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk__organization.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table", "cluster_by": ["id"]}, "created_at": 1641465609, "compiled_sql": "\n\n\nSELECT\nid,\nname AS account_name,\ntags AS tags,\nfrom `lumapps-fivetran`.`zendesk`.`zendesk_organizations`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`"}, "model.lumapps_dbt.stg_salesforce__lumapps_platform": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n  )\n}}\n\nselect\nid,\nAccount__c as salesforce_account_id,\nName as platform_name,\ncast(Platform_ID__c as INTEGER) as organization_id,\nLicense_Type__c as license_type,\nCollab_Suite__c as collab_suite,\nPlatform_Status__c as status,\nCSM_Name__c as csm_owner,\nGo_Live_Date__c as go_live_date\nfrom {{ source('airbyte', 'salesforce_lumapps_platform') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.airbyte.salesforce_lumapps_platform"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "salesforce", "stg_salesforce__lumapps_platform"], "unique_id": "model.lumapps_dbt.stg_salesforce__lumapps_platform", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/salesforce/stg_salesforce__lumapps_platform.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce__lumapps_platform.sql", "name": "stg_salesforce__lumapps_platform", "alias": "stg_salesforce__lumapps_platform", "checksum": {"name": "sha256", "checksum": "5e4cf31d733120f16ae0f6473dfd0f3f0e1b3266f053c87da6b5930867d86f4f"}, "tags": ["bronze"], "refs": [], "sources": [["airbyte", "salesforce_lumapps_platform"]], "description": "Information about lumapps platforms in Salesforce. This table should be replaced by a proper syncro of the \"Customer\" entity in Lumapps.\n", "columns": {"id": {"name": "id", "description": "the id in salesforce for a lumapps platform. This id is useless as there are no foreign key that target it.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "An industry associated with this account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The organization id of the account in the Lumapps product Should be used as a Primary Key until Customers are synchronised from Lumapps\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The region associated with this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arr": {"name": "arr", "description": "The Annual Recurring Revenue this customer brings", "meta": {}, "data_type": null, "quote": null, "tags": []}, "license_type": {"name": "license_type", "description": "the type of licenses the customer bought", "meta": {}, "data_type": null, "quote": null, "tags": []}, "collab_suite": {"name": "collab_suite", "description": "Whether the customer is using Gsuite or O365", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "the status of the platform in lumapps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "csm_owner": {"name": "csm_owner", "description": "the Customer Success manager in charge of this Platform", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_name": {"name": "platform_name", "description": "A human readable name for the platform (usually <organization_name>-<license_type>)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "go_live_date": {"name": "go_live_date", "description": "The Go-Live date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "salesforce_account_id": {"name": "salesforce_account_id", "description": "the id in salesforce for that associated account", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/salesforce/stg_salesforce.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce__lumapps_platform.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table"}, "created_at": 1641465609, "compiled_sql": "\n\nselect\nid,\nAccount__c as salesforce_account_id,\nName as platform_name,\ncast(Platform_ID__c as INTEGER) as organization_id,\nLicense_Type__c as license_type,\nCollab_Suite__c as collab_suite,\nPlatform_Status__c as status,\nCSM_Name__c as csm_owner,\nGo_Live_Date__c as go_live_date\nfrom `lumapps-fivetran`.`airbyte`.`salesforce_LumApps_Platform__c`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__lumapps_platform`"}, "model.lumapps_dbt.stg_salesforce__account": {"raw_sql": "{{\n  config(\n    materialized = \"table\",\n  )\n}}\n\nselect\nid,\nIndustry as industry,\nRegion_Country_is_in__c as region,\nSub_Region__c as sub_region,\nName as organization_name,\nAccount_Owner_Name__c as sales_rep,\nNetsuite_cARR__c as arr,\nNetsuite_Purchased_Licenses__c\tas purchased_licenses,\nZendeskId__c as zendesk_organization_id\nfrom {{ source('airbyte', 'salesforce_account') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.lumapps_dbt.airbyte.salesforce_account"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {"columns": true}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["bronze"], "full_refresh": null, "labels": {"layer": "bronze"}, "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev", "fqn": ["lumapps_dbt", "bronze", "salesforce", "stg_salesforce__account"], "unique_id": "model.lumapps_dbt.stg_salesforce__account", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "bronze/salesforce/stg_salesforce__account.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce__account.sql", "name": "stg_salesforce__account", "alias": "stg_salesforce__account", "checksum": {"name": "sha256", "checksum": "f3114798ef01a6c03247e0af45e70b21cdfe56a2835be8355164018165f2c122"}, "tags": ["bronze"], "refs": [], "sources": [["airbyte", "salesforce_account"]], "description": "Information about the customers", "columns": {"id": {"name": "id", "description": "the id in salesforce for that customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "industry": {"name": "industry", "description": "An industry associated with this account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "The region associated with this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_region": {"name": "sub_region", "description": "The sub region associated with this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_rep": {"name": "sales_rep", "description": "The sales rep in charge of this account", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arr": {"name": "arr", "description": "The Annual Recurring Revenue this customer brings in dollars", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchased_licenses": {"name": "purchased_licenses", "description": "the number of licenses the customer purchased", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zendesk_organization_id": {"name": "zendesk_organization_id", "description": "the id of the account in Zendesk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "A human readable name for the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "lumapps_dbt://models/bronze/salesforce/stg_salesforce.yml", "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce__account.sql", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"columns": true}, "tags": ["bronze"], "labels": {"layer": "bronze"}, "materialized": "table"}, "created_at": 1641465609, "compiled_sql": "\n\nselect\nid,\nIndustry as industry,\nRegion_Country_is_in__c as region,\nSub_Region__c as sub_region,\nName as organization_name,\nAccount_Owner_Name__c as sales_rep,\nNetsuite_cARR__c as arr,\nNetsuite_Purchased_Licenses__c\tas purchased_licenses,\nZendeskId__c as zendesk_organization_id\nfrom `lumapps-fivetran`.`airbyte`.`salesforce_Account`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__account`"}, "test.lumapps_dbt.not_null_fct_days_since_last_actions_engagement_level.064d366e9f": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_level", "model": "{% if config.get('where') %}(select * from {{ ref('fct_days_since_last_actions') }} where {{config.get('where')}}) fct_days_since_last_actions{% else %}{{ ref('fct_days_since_last_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.fct_days_since_last_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_fct_days_since_last_actions_engagement_level"], "unique_id": "test.lumapps_dbt.not_null_fct_days_since_last_actions_engagement_level.064d366e9f", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_fct_days_since_last_actions_engagement_level.sql", "original_file_path": "models/silver/product/product.yml", "name": "not_null_fct_days_since_last_actions_engagement_level", "alias": "not_null_fct_days_since_last_actions_engagement_level", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_days_since_last_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/product.yml/schema_test/not_null_fct_days_since_last_actions_engagement_level.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465608, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions`\nwhere engagement_level is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_level"}, "test.lumapps_dbt.accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor.21b836680a": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_fct_days_since_a6db52f3fef165b0f3011c3c737b302a\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["visitor", "participant", "contributor"], "column_name": "engagement_level", "model": "{% if config.get('where') %}(select * from {{ ref('fct_days_since_last_actions') }} where {{config.get('where')}}) fct_days_since_last_actions{% else %}{{ ref('fct_days_since_last_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.fct_days_since_last_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_fct_days_since_a6db52f3fef165b0f3011c3c737b302a", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor"], "unique_id": "test.lumapps_dbt.accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor.21b836680a", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_fct_days_since_a6db52f3fef165b0f3011c3c737b302a.sql", "original_file_path": "models/silver/product/product.yml", "name": "accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor", "alias": "accepted_values_fct_days_since_a6db52f3fef165b0f3011c3c737b302a", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_days_since_last_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/product.yml/schema_test/accepted_values_fct_days_since_a6db52f3fef165b0f3011c3c737b302a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fct_days_since_a6db52f3fef165b0f3011c3c737b302a"}, "created_at": 1641465608, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_days_since_last_actions`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'visitor','participant','contributor'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_level"}, "test.lumapps_dbt.not_null_fct_daily_user_activity_engagement_level.bf85801e33": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "engagement_level", "model": "{% if config.get('where') %}(select * from {{ ref('fct_daily_user_activity') }} where {{config.get('where')}}) fct_daily_user_activity{% else %}{{ ref('fct_daily_user_activity') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.fct_daily_user_activity"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_fct_daily_user_activity_engagement_level"], "unique_id": "test.lumapps_dbt.not_null_fct_daily_user_activity_engagement_level.bf85801e33", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_fct_daily_user_activity_engagement_level.sql", "original_file_path": "models/silver/product/product.yml", "name": "not_null_fct_daily_user_activity_engagement_level", "alias": "not_null_fct_daily_user_activity_engagement_level", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_daily_user_activity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/product.yml/schema_test/not_null_fct_daily_user_activity_engagement_level.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465608, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_daily_user_activity`\nwhere engagement_level is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_level"}, "test.lumapps_dbt.accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor.d1afa2b861": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_fct_daily_user_2249b429a1c7bfb69780ad7a2487113e\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["visitor", "participant", "contributor"], "column_name": "engagement_level", "model": "{% if config.get('where') %}(select * from {{ ref('fct_daily_user_activity') }} where {{config.get('where')}}) fct_daily_user_activity{% else %}{{ ref('fct_daily_user_activity') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.fct_daily_user_activity"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_fct_daily_user_2249b429a1c7bfb69780ad7a2487113e", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor"], "unique_id": "test.lumapps_dbt.accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor.d1afa2b861", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_fct_daily_user_2249b429a1c7bfb69780ad7a2487113e.sql", "original_file_path": "models/silver/product/product.yml", "name": "accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor", "alias": "accepted_values_fct_daily_user_2249b429a1c7bfb69780ad7a2487113e", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_daily_user_activity"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/silver/product/product.yml/schema_test/accepted_values_fct_daily_user_2249b429a1c7bfb69780ad7a2487113e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fct_daily_user_2249b429a1c7bfb69780ad7a2487113e"}, "created_at": 1641465608, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        engagement_level as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_daily_user_activity`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'visitor','participant','contributor'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "engagement_level"}, "test.lumapps_dbt.not_null_fct_organization_adoption_organization_id.7c54969b75": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_fct_organization_adoption_organization_id"], "unique_id": "test.lumapps_dbt.not_null_fct_organization_adoption_organization_id.7c54969b75", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_fct_organization_adoption_organization_id.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "not_null_fct_organization_adoption_organization_id", "alias": "not_null_fct_organization_adoption_organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/not_null_fct_organization_adoption_organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465608, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\nwhere organization_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_id"}, "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0.d05f968334": {"raw_sql": "{{ dbt_expectations.test_expect_multicolumn_sum_to_equal(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_multic_54e97a6c26a4684db93861a411a588f6\") }}", "test_metadata": {"name": "expect_multicolumn_sum_to_equal", "kwargs": {"column_list": ["daily_active_visitors", "daily_active_participants", "daily_active_contributors", "-daily_active_users"], "sum_total": 0, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_multic_54e97a6c26a4684db93861a411a588f6", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0.d05f968334", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_multic_54e97a6c26a4684db93861a411a588f6.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0", "alias": "dbt_expectations_expect_multic_54e97a6c26a4684db93861a411a588f6", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_multic_54e97a6c26a4684db93861a411a588f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_multic_54e97a6c26a4684db93861a411a588f6"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\nsum(daily_active_visitors) + \n\nsum(daily_active_participants) + \n\nsum(daily_active_contributors) + \n\nsum(-daily_active_users)\n = 0\n as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0.5fe33e618c": {"raw_sql": "{{ dbt_expectations.test_expect_multicolumn_sum_to_equal(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_multic_90506b1b6fc316cc631249c37e6130ee\") }}", "test_metadata": {"name": "expect_multicolumn_sum_to_equal", "kwargs": {"column_list": ["weekly_active_visitors", "weekly_active_participants", "weekly_active_contributors", "-weekly_active_users"], "sum_total": 0, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_multic_90506b1b6fc316cc631249c37e6130ee", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0.5fe33e618c", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_multic_90506b1b6fc316cc631249c37e6130ee.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0", "alias": "dbt_expectations_expect_multic_90506b1b6fc316cc631249c37e6130ee", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_multic_90506b1b6fc316cc631249c37e6130ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_multic_90506b1b6fc316cc631249c37e6130ee"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\nsum(weekly_active_visitors) + \n\nsum(weekly_active_participants) + \n\nsum(weekly_active_contributors) + \n\nsum(-weekly_active_users)\n = 0\n as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0.7cb7c726c7": {"raw_sql": "{{ dbt_expectations.test_expect_multicolumn_sum_to_equal(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_multic_d153284c2a7928e629be27cbf68f6b5d\") }}", "test_metadata": {"name": "expect_multicolumn_sum_to_equal", "kwargs": {"column_list": ["monthly_active_visitors", "monthly_active_participants", "monthly_active_contributors", "-monthly_active_users"], "sum_total": 0, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_multic_d153284c2a7928e629be27cbf68f6b5d", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0.7cb7c726c7", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_multic_d153284c2a7928e629be27cbf68f6b5d.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0", "alias": "dbt_expectations_expect_multic_d153284c2a7928e629be27cbf68f6b5d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_multic_d153284c2a7928e629be27cbf68f6b5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_multic_d153284c2a7928e629be27cbf68f6b5d"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\nsum(monthly_active_visitors) + \n\nsum(monthly_active_participants) + \n\nsum(monthly_active_contributors) + \n\nsum(-monthly_active_users)\n = 0\n as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True.ec9f2d0de4": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_89bf43027f063d8e4ecd78b0438d371f\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "weekly_active_visitors", "column_B": "daily_active_visitors", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_89bf43027f063d8e4ecd78b0438d371f", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True.ec9f2d0de4", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_89bf43027f063d8e4ecd78b0438d371f.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True", "alias": "dbt_expectations_expect_column_89bf43027f063d8e4ecd78b0438d371f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_89bf43027f063d8e4ecd78b0438d371f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_89bf43027f063d8e4ecd78b0438d371f"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  weekly_active_visitors >= daily_active_visitors as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True.6947ea3ef2": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3dd893253e5ff4379e23e333569a2e18\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "monthly_active_visitors", "column_B": "weekly_active_visitors", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_3dd893253e5ff4379e23e333569a2e18", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True.6947ea3ef2", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_3dd893253e5ff4379e23e333569a2e18.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True", "alias": "dbt_expectations_expect_column_3dd893253e5ff4379e23e333569a2e18", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_3dd893253e5ff4379e23e333569a2e18.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3dd893253e5ff4379e23e333569a2e18"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  monthly_active_visitors >= weekly_active_visitors as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True.5d8910579a": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1fd50d4ca3fd3d13387288232b60304f\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "weekly_active_participants", "column_B": "daily_active_participants", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_1fd50d4ca3fd3d13387288232b60304f", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True.5d8910579a", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_1fd50d4ca3fd3d13387288232b60304f.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True", "alias": "dbt_expectations_expect_column_1fd50d4ca3fd3d13387288232b60304f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_1fd50d4ca3fd3d13387288232b60304f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1fd50d4ca3fd3d13387288232b60304f"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  weekly_active_participants >= daily_active_participants as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True.93ec4a1f5a": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15b19371d5d71ba82a3bad67c119befd\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "monthly_active_participants", "column_B": "weekly_active_participants", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_15b19371d5d71ba82a3bad67c119befd", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True.93ec4a1f5a", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_15b19371d5d71ba82a3bad67c119befd.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True", "alias": "dbt_expectations_expect_column_15b19371d5d71ba82a3bad67c119befd", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_15b19371d5d71ba82a3bad67c119befd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_15b19371d5d71ba82a3bad67c119befd"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  monthly_active_participants >= weekly_active_participants as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True.da4931fe3b": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d789e13fbf5d62f9f873efb5edf4c73e\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "weekly_active_contributors", "column_B": "daily_active_contributors", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_d789e13fbf5d62f9f873efb5edf4c73e", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True.da4931fe3b", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_d789e13fbf5d62f9f873efb5edf4c73e.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True", "alias": "dbt_expectations_expect_column_d789e13fbf5d62f9f873efb5edf4c73e", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_d789e13fbf5d62f9f873efb5edf4c73e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d789e13fbf5d62f9f873efb5edf4c73e"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  weekly_active_contributors >= daily_active_contributors as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True.edfe3c3942": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a9f67b65424067396111b6e6a5ed0df\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "monthly_active_contributors", "column_B": "weekly_active_contributors", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_8a9f67b65424067396111b6e6a5ed0df", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True.edfe3c3942", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_8a9f67b65424067396111b6e6a5ed0df.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True", "alias": "dbt_expectations_expect_column_8a9f67b65424067396111b6e6a5ed0df", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_8a9f67b65424067396111b6e6a5ed0df.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8a9f67b65424067396111b6e6a5ed0df"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  monthly_active_contributors >= weekly_active_contributors as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True.3aa10c9db8": {"raw_sql": "{{ dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ade5a8b3ca763b471eb1e5e965b56623\") }}", "test_metadata": {"name": "expect_column_pair_values_A_to_be_greater_than_B", "kwargs": {"column_A": "session_count", "column_B": "daily_active_users", "or_equal": true, "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro.dbt_expectations.expression_is_true"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_expectations_expect_column_ade5a8b3ca763b471eb1e5e965b56623", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True"], "unique_id": "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True.3aa10c9db8", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_expectations_expect_column_ade5a8b3ca763b471eb1e5e965b56623.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True", "alias": "dbt_expectations_expect_column_ade5a8b3ca763b471eb1e5e965b56623", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_expectations_expect_column_ade5a8b3ca763b471eb1e5e965b56623.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ade5a8b3ca763b471eb1e5e965b56623"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  session_count >= daily_active_users as expression\n\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id.92e47d62b8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_41aa3d324c52703230e708162452350b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["date", "organization_id"], "model": "{% if config.get('where') %}(select * from {{ ref('fct_organization_adoption') }} where {{config.get('where')}}) fct_organization_adoption{% else %}{{ ref('fct_organization_adoption') }}{% endif %}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt_utils.default__test_unique_combination_of_columns"], "nodes": ["model.lumapps_dbt.fct_organization_adoption"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_utils_unique_combination_o_41aa3d324c52703230e708162452350b", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id"], "unique_id": "test.lumapps_dbt.dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id.92e47d62b8", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_utils_unique_combination_o_41aa3d324c52703230e708162452350b.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id", "alias": "dbt_utils_unique_combination_o_41aa3d324c52703230e708162452350b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_organization_adoption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_utils_unique_combination_o_41aa3d324c52703230e708162452350b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_41aa3d324c52703230e708162452350b"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date, organization_id\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`fct_organization_adoption`\n    group by date, organization_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null}, "test.lumapps_dbt.unique_dim_lumapps_platform_organization_id.553384d459": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_lumapps_platform') }} where {{config.get('where')}}) dim_lumapps_platform{% else %}{{ ref('dim_lumapps_platform') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.dim_lumapps_platform"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_dim_lumapps_platform_organization_id"], "unique_id": "test.lumapps_dbt.unique_dim_lumapps_platform_organization_id.553384d459", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_dim_lumapps_platform_organization_id.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "unique_dim_lumapps_platform_organization_id", "alias": "unique_dim_lumapps_platform_organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_lumapps_platform"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/unique_dim_lumapps_platform_organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    organization_id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`dim_lumapps_platform`\nwhere organization_id is not null\ngroup by organization_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_id"}, "test.lumapps_dbt.dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.f77e433c22": {"raw_sql": "{{ dbt_utils.test_relationships_where(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_relationships_where__f28055623de544990a317fc2ace29ccf\") }}", "test_metadata": {"name": "relationships_where", "kwargs": {"to": "ref('stg_zendesk__organization')", "field": "id", "from_condition": "zendesk_organization_id IS NOT NULL", "column_name": "zendesk_organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_lumapps_platform') }} where {{config.get('where')}}) dim_lumapps_platform{% else %}{{ ref('dim_lumapps_platform') }}{% endif %}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_relationships_where", "macro.dbt_utils.default__test_relationships_where"], "nodes": ["model.lumapps_dbt.stg_zendesk__organization", "model.lumapps_dbt.dim_lumapps_platform"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_utils_relationships_where__f28055623de544990a317fc2ace29ccf", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_"], "unique_id": "test.lumapps_dbt.dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.f77e433c22", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_utils_relationships_where__f28055623de544990a317fc2ace29ccf.sql", "original_file_path": "models/gold/customer-success/customer-success.yml", "name": "dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_", "alias": "dbt_utils_relationships_where__f28055623de544990a317fc2ace29ccf", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__organization"], ["dim_lumapps_platform"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/gold/customer-success/customer-success.yml/schema_test/dbt_utils_relationships_where__f28055623de544990a317fc2ace29ccf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_relationships_where__f28055623de544990a317fc2ace29ccf"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\nwith left_table as (\n\n  select\n    zendesk_organization_id as id\n\n  from `lumapps-fivetran`.`dbt_lumapps_dev`.`dim_lumapps_platform`\n\n  where zendesk_organization_id is not null\n    and zendesk_organization_id IS NOT NULL\n\n),\n\nright_table as (\n\n  select\n    id as id\n\n  from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`\n\n  where id is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "zendesk_organization_id"}, "test.lumapps_dbt.not_null_stg_analytics__user_actions_action_type.02e2a8fe40": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "action_type", "model": "{% if config.get('where') %}(select * from {{ ref('stg_analytics__user_actions') }} where {{config.get('where')}}) stg_analytics__user_actions{% else %}{{ ref('stg_analytics__user_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_analytics__user_actions_action_type"], "unique_id": "test.lumapps_dbt.not_null_stg_analytics__user_actions_action_type.02e2a8fe40", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_analytics__user_actions_action_type.sql", "original_file_path": "models/bronze/analytics/stg_analytics.yml", "name": "not_null_stg_analytics__user_actions_action_type", "alias": "not_null_stg_analytics__user_actions_action_type", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_analytics.yml/schema_test/not_null_stg_analytics__user_actions_action_type.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\nwhere action_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "action_type"}, "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction.16122a8055": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_stg_analytics__168836cc91aba9dadb5ecaaa8700428d\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["ViewAction", "CommentAction", "CreateAction", "UpdateAction", "DeleteAction", "FollowAction", "ReactAction", "VoteAction"], "column_name": "action_type", "model": "{% if config.get('where') %}(select * from {{ ref('stg_analytics__user_actions') }} where {{config.get('where')}}) stg_analytics__user_actions{% else %}{{ ref('stg_analytics__user_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_stg_analytics__168836cc91aba9dadb5ecaaa8700428d", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction"], "unique_id": "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction.16122a8055", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_stg_analytics__168836cc91aba9dadb5ecaaa8700428d.sql", "original_file_path": "models/bronze/analytics/stg_analytics.yml", "name": "accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction", "alias": "accepted_values_stg_analytics__168836cc91aba9dadb5ecaaa8700428d", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_analytics.yml/schema_test/accepted_values_stg_analytics__168836cc91aba9dadb5ecaaa8700428d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_analytics__168836cc91aba9dadb5ecaaa8700428d"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        action_type as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'ViewAction','CommentAction','CreateAction','UpdateAction','DeleteAction','FollowAction','ReactAction','VoteAction'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "action_type"}, "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp.c226eceb2f": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_stg_analytics__4cebfd433f934a01e6e69cb1754c47f8\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["lumsites", "lumapps-us-002", "lumapps-others", "lumapps-eu", "lumapps-jp"], "column_name": "cell", "model": "{% if config.get('where') %}(select * from {{ ref('stg_analytics__user_actions') }} where {{config.get('where')}}) stg_analytics__user_actions{% else %}{{ ref('stg_analytics__user_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_stg_analytics__4cebfd433f934a01e6e69cb1754c47f8", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp"], "unique_id": "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp.c226eceb2f", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_stg_analytics__4cebfd433f934a01e6e69cb1754c47f8.sql", "original_file_path": "models/bronze/analytics/stg_analytics.yml", "name": "accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp", "alias": "accepted_values_stg_analytics__4cebfd433f934a01e6e69cb1754c47f8", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_analytics.yml/schema_test/accepted_values_stg_analytics__4cebfd433f934a01e6e69cb1754c47f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_analytics__4cebfd433f934a01e6e69cb1754c47f8"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        cell as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'lumsites','lumapps-us-002','lumapps-others','lumapps-eu','lumapps-jp'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "cell"}, "test.lumapps_dbt.not_null_stg_analytics__user_actions_user_id.62ec52a63c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_analytics__user_actions') }} where {{config.get('where')}}) stg_analytics__user_actions{% else %}{{ ref('stg_analytics__user_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_analytics__user_actions_user_id"], "unique_id": "test.lumapps_dbt.not_null_stg_analytics__user_actions_user_id.62ec52a63c", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_analytics__user_actions_user_id.sql", "original_file_path": "models/bronze/analytics/stg_analytics.yml", "name": "not_null_stg_analytics__user_actions_user_id", "alias": "not_null_stg_analytics__user_actions_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_analytics.yml/schema_test/not_null_stg_analytics__user_actions_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id"}, "test.lumapps_dbt.not_null_stg_analytics__user_actions_country.d39f5cbb9c": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country", "model": "{% if config.get('where') %}(select * from {{ ref('stg_analytics__user_actions') }} where {{config.get('where')}}) stg_analytics__user_actions{% else %}{{ ref('stg_analytics__user_actions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_analytics__user_actions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_analytics__user_actions_country"], "unique_id": "test.lumapps_dbt.not_null_stg_analytics__user_actions_country.d39f5cbb9c", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_analytics__user_actions_country.sql", "original_file_path": "models/bronze/analytics/stg_analytics.yml", "name": "not_null_stg_analytics__user_actions_country", "alias": "not_null_stg_analytics__user_actions_country", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_analytics__user_actions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/analytics/stg_analytics.yml/schema_test/not_null_stg_analytics__user_actions_country.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_analytics__user_actions`\nwhere country is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "country"}, "test.lumapps_dbt.unique_stg_zendesk__user_id.2301fe01d4": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__user') }} where {{config.get('where')}}) stg_zendesk__user{% else %}{{ ref('stg_zendesk__user') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_zendesk__user"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_zendesk__user_id"], "unique_id": "test.lumapps_dbt.unique_stg_zendesk__user_id.2301fe01d4", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_zendesk__user_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "unique_stg_zendesk__user_id", "alias": "unique_stg_zendesk__user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/unique_stg_zendesk__user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__user`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.not_null_stg_zendesk__user_id.83f13f1c76": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__user') }} where {{config.get('where')}}) stg_zendesk__user{% else %}{{ ref('stg_zendesk__user') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_zendesk__user"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_zendesk__user_id"], "unique_id": "test.lumapps_dbt.not_null_stg_zendesk__user_id.83f13f1c76", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_zendesk__user_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "not_null_stg_zendesk__user_id", "alias": "not_null_stg_zendesk__user_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/not_null_stg_zendesk__user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__user`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.accepted_values_stg_zendesk__user_role__end_user__agent__admin.8eabb6a566": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["end-user", "agent", "admin"], "column_name": "role", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__user') }} where {{config.get('where')}}) stg_zendesk__user{% else %}{{ ref('stg_zendesk__user') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.stg_zendesk__user"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_stg_zendesk__user_role__end_user__agent__admin"], "unique_id": "test.lumapps_dbt.accepted_values_stg_zendesk__user_role__end_user__agent__admin.8eabb6a566", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_stg_zendesk__user_role__end_user__agent__admin.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "accepted_values_stg_zendesk__user_role__end_user__agent__admin", "alias": "accepted_values_stg_zendesk__user_role__end_user__agent__admin", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/accepted_values_stg_zendesk__user_role__end_user__agent__admin.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        role as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__user`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'end-user','agent','admin'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "role"}, "test.lumapps_dbt.relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_.46e7a20c7a": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_stg_zendesk__use_25abd5d356e5a41c52fc07dd327ccef1\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_zendesk__organization')", "field": "id", "column_name": "zendesk_organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__user') }} where {{config.get('where')}}) stg_zendesk__user{% else %}{{ ref('stg_zendesk__user') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.lumapps_dbt.stg_zendesk__organization", "model.lumapps_dbt.stg_zendesk__user"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_stg_zendesk__use_25abd5d356e5a41c52fc07dd327ccef1", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_"], "unique_id": "test.lumapps_dbt.relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_.46e7a20c7a", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/relationships_stg_zendesk__use_25abd5d356e5a41c52fc07dd327ccef1.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_", "alias": "relationships_stg_zendesk__use_25abd5d356e5a41c52fc07dd327ccef1", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__organization"], ["stg_zendesk__user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/relationships_stg_zendesk__use_25abd5d356e5a41c52fc07dd327ccef1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_zendesk__use_25abd5d356e5a41c52fc07dd327ccef1"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith child as (\n    select * from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__user`\n    where zendesk_organization_id is not null\n),\n\nparent as (\n    select * from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`\n)\n\nselect\n    child.zendesk_organization_id\n\nfrom child\nleft join parent\n    on child.zendesk_organization_id = parent.id\n\nwhere parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "zendesk_organization_id"}, "test.lumapps_dbt.unique_stg_zendesk__organization_id.ed42bcc970": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__organization') }} where {{config.get('where')}}) stg_zendesk__organization{% else %}{{ ref('stg_zendesk__organization') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_zendesk__organization"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_zendesk__organization_id"], "unique_id": "test.lumapps_dbt.unique_stg_zendesk__organization_id.ed42bcc970", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_zendesk__organization_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "unique_stg_zendesk__organization_id", "alias": "unique_stg_zendesk__organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__organization"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/unique_stg_zendesk__organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.not_null_stg_zendesk__organization_id.3a880a6661": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__organization') }} where {{config.get('where')}}) stg_zendesk__organization{% else %}{{ ref('stg_zendesk__organization') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_zendesk__organization"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_zendesk__organization_id"], "unique_id": "test.lumapps_dbt.not_null_stg_zendesk__organization_id.3a880a6661", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_zendesk__organization_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "not_null_stg_zendesk__organization_id", "alias": "not_null_stg_zendesk__organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__organization"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/not_null_stg_zendesk__organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.unique_stg_zendesk__ticket_id.ee59617b23": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket') }} where {{config.get('where')}}) stg_zendesk__ticket{% else %}{{ ref('stg_zendesk__ticket') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_zendesk__ticket_id"], "unique_id": "test.lumapps_dbt.unique_stg_zendesk__ticket_id.ee59617b23", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_zendesk__ticket_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "unique_stg_zendesk__ticket_id", "alias": "unique_stg_zendesk__ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/unique_stg_zendesk__ticket_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.not_null_stg_zendesk__ticket_id.bc882c595a": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket') }} where {{config.get('where')}}) stg_zendesk__ticket{% else %}{{ ref('stg_zendesk__ticket') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_zendesk__ticket_id"], "unique_id": "test.lumapps_dbt.not_null_stg_zendesk__ticket_id.bc882c595a", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_zendesk__ticket_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "not_null_stg_zendesk__ticket_id", "alias": "not_null_stg_zendesk__ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/not_null_stg_zendesk__ticket_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_type__problem__incident__question__task.7f5866a855": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_stg_zendesk__t_fcbbdd6156e60614744bf39e7a611881\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["problem", "incident", "question", "task"], "column_name": "type", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket') }} where {{config.get('where')}}) stg_zendesk__ticket{% else %}{{ ref('stg_zendesk__ticket') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_stg_zendesk__t_fcbbdd6156e60614744bf39e7a611881", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_stg_zendesk__ticket_type__problem__incident__question__task"], "unique_id": "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_type__problem__incident__question__task.7f5866a855", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_stg_zendesk__t_fcbbdd6156e60614744bf39e7a611881.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "accepted_values_stg_zendesk__ticket_type__problem__incident__question__task", "alias": "accepted_values_stg_zendesk__t_fcbbdd6156e60614744bf39e7a611881", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/accepted_values_stg_zendesk__t_fcbbdd6156e60614744bf39e7a611881.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_zendesk__t_fcbbdd6156e60614744bf39e7a611881"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        type as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'problem','incident','question','task'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "type"}, "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted.7d75ffea26": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_stg_zendesk__t_c9a5949ce18fe78170339ec97f14167f\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["open", "pending", "solved", "hold", "closed", "new", "deleted"], "column_name": "status", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket') }} where {{config.get('where')}}) stg_zendesk__ticket{% else %}{{ ref('stg_zendesk__ticket') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_stg_zendesk__t_c9a5949ce18fe78170339ec97f14167f", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted"], "unique_id": "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted.7d75ffea26", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_stg_zendesk__t_c9a5949ce18fe78170339ec97f14167f.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted", "alias": "accepted_values_stg_zendesk__t_c9a5949ce18fe78170339ec97f14167f", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/accepted_values_stg_zendesk__t_c9a5949ce18fe78170339ec97f14167f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_zendesk__t_c9a5949ce18fe78170339ec97f14167f"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'open','pending','solved','hold','closed','new','deleted'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status"}, "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low.ce3c2bccca": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_stg_zendesk__t_76f64af7332a5054ac92c751afc532c7\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["urgent", "high", "normal", "low"], "column_name": "priority", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket') }} where {{config.get('where')}}) stg_zendesk__ticket{% else %}{{ ref('stg_zendesk__ticket') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_stg_zendesk__t_76f64af7332a5054ac92c751afc532c7", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low"], "unique_id": "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low.ce3c2bccca", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/accepted_values_stg_zendesk__t_76f64af7332a5054ac92c751afc532c7.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low", "alias": "accepted_values_stg_zendesk__t_76f64af7332a5054ac92c751afc532c7", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/accepted_values_stg_zendesk__t_76f64af7332a5054ac92c751afc532c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_stg_zendesk__t_76f64af7332a5054ac92c751afc532c7"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        priority as value_field,\n        count(*) as n_records\n\n    from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'urgent','high','normal','low'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority"}, "test.lumapps_dbt.relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_.d29e6732f9": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_stg_zendesk__tic_b7e5b72bad20fee0889880d883302c90\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_zendesk__organization')", "field": "id", "column_name": "zendesk_organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket') }} where {{config.get('where')}}) stg_zendesk__ticket{% else %}{{ ref('stg_zendesk__ticket') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.lumapps_dbt.stg_zendesk__organization", "model.lumapps_dbt.stg_zendesk__ticket"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_stg_zendesk__tic_b7e5b72bad20fee0889880d883302c90", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_"], "unique_id": "test.lumapps_dbt.relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_.d29e6732f9", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/relationships_stg_zendesk__tic_b7e5b72bad20fee0889880d883302c90.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_", "alias": "relationships_stg_zendesk__tic_b7e5b72bad20fee0889880d883302c90", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__organization"], ["stg_zendesk__ticket"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/relationships_stg_zendesk__tic_b7e5b72bad20fee0889880d883302c90.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_zendesk__tic_b7e5b72bad20fee0889880d883302c90"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith child as (\n    select * from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\n    where zendesk_organization_id is not null\n),\n\nparent as (\n    select * from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`\n)\n\nselect\n    child.zendesk_organization_id\n\nfrom child\nleft join parent\n    on child.zendesk_organization_id = parent.id\n\nwhere parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "zendesk_organization_id"}, "test.lumapps_dbt.unique_stg_zendesk__ticket_metric_ticket_id.c31f4a7853": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket_metric') }} where {{config.get('where')}}) stg_zendesk__ticket_metric{% else %}{{ ref('stg_zendesk__ticket_metric') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket_metric"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_zendesk__ticket_metric_ticket_id"], "unique_id": "test.lumapps_dbt.unique_stg_zendesk__ticket_metric_ticket_id.c31f4a7853", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_zendesk__ticket_metric_ticket_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "unique_stg_zendesk__ticket_metric_ticket_id", "alias": "unique_stg_zendesk__ticket_metric_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket_metric"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/unique_stg_zendesk__ticket_metric_ticket_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    ticket_id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket_metric`\nwhere ticket_id is not null\ngroup by ticket_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ticket_id"}, "test.lumapps_dbt.not_null_stg_zendesk__ticket_metric_ticket_id.b11430f069": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket_metric') }} where {{config.get('where')}}) stg_zendesk__ticket_metric{% else %}{{ ref('stg_zendesk__ticket_metric') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket_metric"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "not_null_stg_zendesk__ticket_metric_ticket_id"], "unique_id": "test.lumapps_dbt.not_null_stg_zendesk__ticket_metric_ticket_id.b11430f069", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/not_null_stg_zendesk__ticket_metric_ticket_id.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "not_null_stg_zendesk__ticket_metric_ticket_id", "alias": "not_null_stg_zendesk__ticket_metric_ticket_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket_metric"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/not_null_stg_zendesk__ticket_metric_ticket_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect *\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket_metric`\nwhere ticket_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ticket_id"}, "test.lumapps_dbt.relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_.ec6acb53bb": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"relationships_stg_zendesk__tic_212ce781c06d2cd778442aa40d4e60eb\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_zendesk__ticket')", "field": "id", "column_name": "ticket_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_zendesk__ticket_metric') }} where {{config.get('where')}}) stg_zendesk__ticket_metric{% else %}{{ ref('stg_zendesk__ticket_metric') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.lumapps_dbt.stg_zendesk__ticket", "model.lumapps_dbt.stg_zendesk__ticket_metric"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_stg_zendesk__tic_212ce781c06d2cd778442aa40d4e60eb", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_"], "unique_id": "test.lumapps_dbt.relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_.ec6acb53bb", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/relationships_stg_zendesk__tic_212ce781c06d2cd778442aa40d4e60eb.sql", "original_file_path": "models/bronze/zendesk/stg_zendesk.yml", "name": "relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_", "alias": "relationships_stg_zendesk__tic_212ce781c06d2cd778442aa40d4e60eb", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__ticket"], ["stg_zendesk__ticket_metric"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/zendesk/stg_zendesk.yml/schema_test/relationships_stg_zendesk__tic_212ce781c06d2cd778442aa40d4e60eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_zendesk__tic_212ce781c06d2cd778442aa40d4e60eb"}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nwith child as (\n    select * from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket_metric`\n    where ticket_id is not null\n),\n\nparent as (\n    select * from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__ticket`\n)\n\nselect\n    child.ticket_id\n\nfrom child\nleft join parent\n    on child.ticket_id = parent.id\n\nwhere parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ticket_id"}, "test.lumapps_dbt.unique_stg_salesforce__account_id.3fc0ae23fd": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_salesforce__account') }} where {{config.get('where')}}) stg_salesforce__account{% else %}{{ ref('stg_salesforce__account') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_salesforce__account"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_salesforce__account_id"], "unique_id": "test.lumapps_dbt.unique_stg_salesforce__account_id.3fc0ae23fd", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_salesforce__account_id.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce.yml", "name": "unique_stg_salesforce__account_id", "alias": "unique_stg_salesforce__account_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_salesforce__account"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce.yml/schema_test/unique_stg_salesforce__account_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__account`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.1312f7a048": {"raw_sql": "{{ dbt_utils.test_relationships_where(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_relationships_where__06ded917c40a05955ac8d18d35965998\") }}", "test_metadata": {"name": "relationships_where", "kwargs": {"to": "ref('stg_zendesk__organization')", "field": "id", "from_condition": "zendesk_organization_id IS NOT NULL", "column_name": "zendesk_organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_salesforce__account') }} where {{config.get('where')}}) stg_salesforce__account{% else %}{{ ref('stg_salesforce__account') }}{% endif %}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_relationships_where", "macro.dbt_utils.default__test_relationships_where"], "nodes": ["model.lumapps_dbt.stg_zendesk__organization", "model.lumapps_dbt.stg_salesforce__account"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_utils_relationships_where__06ded917c40a05955ac8d18d35965998", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_"], "unique_id": "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.1312f7a048", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_utils_relationships_where__06ded917c40a05955ac8d18d35965998.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce.yml", "name": "dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_", "alias": "dbt_utils_relationships_where__06ded917c40a05955ac8d18d35965998", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_zendesk__organization"], ["stg_salesforce__account"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce.yml/schema_test/dbt_utils_relationships_where__06ded917c40a05955ac8d18d35965998.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_relationships_where__06ded917c40a05955ac8d18d35965998"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\nwith left_table as (\n\n  select\n    zendesk_organization_id as id\n\n  from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__account`\n\n  where zendesk_organization_id is not null\n    and zendesk_organization_id IS NOT NULL\n\n),\n\nright_table as (\n\n  select\n    id as id\n\n  from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_zendesk__organization`\n\n  where id is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "zendesk_organization_id"}, "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_id.ebe6dfbf75": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_salesforce__lumapps_platform') }} where {{config.get('where')}}) stg_salesforce__lumapps_platform{% else %}{{ ref('stg_salesforce__lumapps_platform') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_salesforce__lumapps_platform"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_salesforce__lumapps_platform_id"], "unique_id": "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_id.ebe6dfbf75", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_salesforce__lumapps_platform_id.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce.yml", "name": "unique_stg_salesforce__lumapps_platform_id", "alias": "unique_stg_salesforce__lumapps_platform_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_salesforce__lumapps_platform"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce.yml/schema_test/unique_stg_salesforce__lumapps_platform_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__lumapps_platform`\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "id"}, "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_organization_id.6ef6657365": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "organization_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_salesforce__lumapps_platform') }} where {{config.get('where')}}) stg_salesforce__lumapps_platform{% else %}{{ ref('stg_salesforce__lumapps_platform') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.lumapps_dbt.stg_salesforce__lumapps_platform"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "unique_stg_salesforce__lumapps_platform_organization_id"], "unique_id": "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_organization_id.6ef6657365", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/unique_stg_salesforce__lumapps_platform_organization_id.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce.yml", "name": "unique_stg_salesforce__lumapps_platform_organization_id", "alias": "unique_stg_salesforce__lumapps_platform_organization_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_salesforce__lumapps_platform"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce.yml/schema_test/unique_stg_salesforce__lumapps_platform_organization_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1641465609, "compiled_sql": "\n    \n    \n\nselect\n    organization_id,\n    count(*) as n_records\n\nfrom `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__lumapps_platform`\nwhere organization_id is not null\ngroup by organization_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "organization_id"}, "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_.0e6d8ee94b": {"raw_sql": "{{ dbt_utils.test_relationships_where(**_dbt_schema_test_kwargs) }}{{ config(alias=\"dbt_utils_relationships_where__b1af0b75d49b07e3ff3e7fd1759feb70\") }}", "test_metadata": {"name": "relationships_where", "kwargs": {"to": "ref('stg_salesforce__account')", "field": "id", "from_condition": "salesforce_account_id IS NOT NULL", "column_name": "salesforce_account_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_salesforce__lumapps_platform') }} where {{config.get('where')}}) stg_salesforce__lumapps_platform{% else %}{{ ref('stg_salesforce__lumapps_platform') }}{% endif %}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_relationships_where", "macro.dbt_utils.default__test_relationships_where"], "nodes": ["model.lumapps_dbt.stg_salesforce__account", "model.lumapps_dbt.stg_salesforce__lumapps_platform"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "dbt_utils_relationships_where__b1af0b75d49b07e3ff3e7fd1759feb70", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "lumapps-fivetran", "schema": "dbt_lumapps_dev_dbt_test__audit", "fqn": ["lumapps_dbt", "schema_test", "dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_"], "unique_id": "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_.0e6d8ee94b", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "schema_test/dbt_utils_relationships_where__b1af0b75d49b07e3ff3e7fd1759feb70.sql", "original_file_path": "models/bronze/salesforce/stg_salesforce.yml", "name": "dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_", "alias": "dbt_utils_relationships_where__b1af0b75d49b07e3ff3e7fd1759feb70", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_salesforce__account"], ["stg_salesforce__lumapps_platform"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/lumapps_dbt/models/bronze/salesforce/stg_salesforce.yml/schema_test/dbt_utils_relationships_where__b1af0b75d49b07e3ff3e7fd1759feb70.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_relationships_where__b1af0b75d49b07e3ff3e7fd1759feb70"}, "created_at": 1641465609, "compiled_sql": "\n\n\n\n\nwith left_table as (\n\n  select\n    salesforce_account_id as id\n\n  from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__lumapps_platform`\n\n  where salesforce_account_id is not null\n    and salesforce_account_id IS NOT NULL\n\n),\n\nright_table as (\n\n  select\n    id as id\n\n  from `lumapps-fivetran`.`dbt_lumapps_dev`.`stg_salesforce__account`\n\n  where id is not null\n    and 1=1\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "salesforce_account_id"}}, "sources": {"source.lumapps_dbt.analytics.user_actions": {"fqn": ["lumapps_dbt", "bronze", "analytics", "analytics", "user_actions"], "database": "lumapps-fivetran", "schema": "analytics", "unique_id": "source.lumapps_dbt.analytics.user_actions", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/analytics/src_analytics.yml", "original_file_path": "models/bronze/analytics/src_analytics.yml", "name": "user_actions", "source_name": "analytics", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "", "identifier": "user_actions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "All the events that are currently available in the report API\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`analytics`.`user_actions`", "created_at": 1641465609}, "source.lumapps_dbt.analytics.contents": {"fqn": ["lumapps_dbt", "bronze", "analytics", "analytics", "contents"], "database": "lumapps-fivetran", "schema": "analytics", "unique_id": "source.lumapps_dbt.analytics.contents", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/analytics/src_analytics.yml", "original_file_path": "models/bronze/analytics/src_analytics.yml", "name": "contents", "source_name": "analytics", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "", "identifier": "contents", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Contents in lumapps\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`analytics`.`contents`", "created_at": 1641465609}, "source.lumapps_dbt.analytics.sites": {"fqn": ["lumapps_dbt", "bronze", "analytics", "analytics", "sites"], "database": "lumapps-fivetran", "schema": "analytics", "unique_id": "source.lumapps_dbt.analytics.sites", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/analytics/src_analytics.yml", "original_file_path": "models/bronze/analytics/src_analytics.yml", "name": "sites", "source_name": "analytics", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "", "identifier": "sites", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Sites in lumapps\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`analytics`.`sites`", "created_at": 1641465609}, "source.lumapps_dbt.analytics.custom_content_types": {"fqn": ["lumapps_dbt", "bronze", "analytics", "analytics", "custom_content_types"], "database": "lumapps-fivetran", "schema": "analytics", "unique_id": "source.lumapps_dbt.analytics.custom_content_types", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/analytics/src_analytics.yml", "original_file_path": "models/bronze/analytics/src_analytics.yml", "name": "custom_content_types", "source_name": "analytics", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "", "identifier": "custom_content_types", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Custom Content Types in lumapps", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`analytics`.`custom_content_types`", "created_at": 1641465609}, "source.lumapps_dbt.zendesk.zendesk_tickets": {"fqn": ["lumapps_dbt", "bronze", "zendesk", "zendesk", "zendesk_tickets"], "database": "lumapps-fivetran", "schema": "zendesk", "unique_id": "source.lumapps_dbt.zendesk.zendesk_tickets", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/zendesk/src_zendesk.yml", "original_file_path": "models/bronze/zendesk/src_zendesk.yml", "name": "zendesk_tickets", "source_name": "zendesk", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "airbyte", "identifier": "zendesk_tickets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "All the tickets in Zendesk\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`zendesk`.`zendesk_tickets`", "created_at": 1641465609}, "source.lumapps_dbt.zendesk.zendesk_ticket_metrics": {"fqn": ["lumapps_dbt", "bronze", "zendesk", "zendesk", "zendesk_ticket_metrics"], "database": "lumapps-fivetran", "schema": "zendesk", "unique_id": "source.lumapps_dbt.zendesk.zendesk_ticket_metrics", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/zendesk/src_zendesk.yml", "original_file_path": "models/bronze/zendesk/src_zendesk.yml", "name": "zendesk_ticket_metrics", "source_name": "zendesk", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "airbyte", "identifier": "zendesk_ticket_metrics", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Metrics provided by Zendesk on the tickets\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`zendesk`.`zendesk_ticket_metrics`", "created_at": 1641465609}, "source.lumapps_dbt.zendesk.zendesk_organizations": {"fqn": ["lumapps_dbt", "bronze", "zendesk", "zendesk", "zendesk_organizations"], "database": "lumapps-fivetran", "schema": "zendesk", "unique_id": "source.lumapps_dbt.zendesk.zendesk_organizations", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/zendesk/src_zendesk.yml", "original_file_path": "models/bronze/zendesk/src_zendesk.yml", "name": "zendesk_organizations", "source_name": "zendesk", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "airbyte", "identifier": "zendesk_organizations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`zendesk`.`zendesk_organizations`", "created_at": 1641465609}, "source.lumapps_dbt.zendesk.zendesk_users": {"fqn": ["lumapps_dbt", "bronze", "zendesk", "zendesk", "zendesk_users"], "database": "lumapps-fivetran", "schema": "zendesk", "unique_id": "source.lumapps_dbt.zendesk.zendesk_users", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/zendesk/src_zendesk.yml", "original_file_path": "models/bronze/zendesk/src_zendesk.yml", "name": "zendesk_users", "source_name": "zendesk", "source_description": "Data coming from the so-called `lumapps-analytics`", "loader": "airbyte", "identifier": "zendesk_users", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Users in Zendesk whether they are lumies or customers.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`zendesk`.`zendesk_users`", "created_at": 1641465609}, "source.lumapps_dbt.airbyte.salesforce_account": {"fqn": ["lumapps_dbt", "bronze", "salesforce", "airbyte", "salesforce_account"], "database": "lumapps-fivetran", "schema": "airbyte", "unique_id": "source.lumapps_dbt.airbyte.salesforce_account", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/salesforce/src_salesforce.yml", "original_file_path": "models/bronze/salesforce/src_salesforce.yml", "name": "salesforce_account", "source_name": "airbyte", "source_description": "Data coming coming from \"Airbyte\" daily", "loader": "", "identifier": "salesforce_Account", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Info about accounts in salesforce. An account being a Customer or Prospect.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`airbyte`.`salesforce_Account`", "created_at": 1641465609}, "source.lumapps_dbt.airbyte.salesforce_account_history": {"fqn": ["lumapps_dbt", "bronze", "salesforce", "airbyte", "salesforce_account_history"], "database": "lumapps-fivetran", "schema": "airbyte", "unique_id": "source.lumapps_dbt.airbyte.salesforce_account_history", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/salesforce/src_salesforce.yml", "original_file_path": "models/bronze/salesforce/src_salesforce.yml", "name": "salesforce_account_history", "source_name": "airbyte", "source_description": "Data coming coming from \"Airbyte\" daily", "loader": "", "identifier": "salesforce_Account_scd", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "History about accounts in salesforce. It is exactly like salesforce_account with a _airbyte_start_at and _airbyte_end_at column that help knowing when the row is valid.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`airbyte`.`salesforce_Account_scd`", "created_at": 1641465609}, "source.lumapps_dbt.airbyte.salesforce_lumapps_platform": {"fqn": ["lumapps_dbt", "bronze", "salesforce", "airbyte", "salesforce_lumapps_platform"], "database": "lumapps-fivetran", "schema": "airbyte", "unique_id": "source.lumapps_dbt.airbyte.salesforce_lumapps_platform", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/salesforce/src_salesforce.yml", "original_file_path": "models/bronze/salesforce/src_salesforce.yml", "name": "salesforce_lumapps_platform", "source_name": "airbyte", "source_description": "Data coming coming from \"Airbyte\" daily", "loader": "", "identifier": "salesforce_LumApps_Platform__c", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Info about Lumapps Platforms in salesforce.\n", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`airbyte`.`salesforce_LumApps_Platform__c`", "created_at": 1641465609}, "source.lumapps_dbt.airbyte.salesforce_lumapps_platform_history": {"fqn": ["lumapps_dbt", "bronze", "salesforce", "airbyte", "salesforce_lumapps_platform_history"], "database": "lumapps-fivetran", "schema": "airbyte", "unique_id": "source.lumapps_dbt.airbyte.salesforce_lumapps_platform_history", "package_name": "lumapps_dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt", "path": "models/bronze/salesforce/src_salesforce.yml", "original_file_path": "models/bronze/salesforce/src_salesforce.yml", "name": "salesforce_lumapps_platform_history", "source_name": "airbyte", "source_description": "Data coming coming from \"Airbyte\" daily", "loader": "", "identifier": "salesforce_LumApps_Platform__c_scd", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "Info about Lumapps Platforms in salesforce. It is exactly like salesforce_lumapps_platform with a _airbyte_start_at and _airbyte_end_at column that help knowing when the row is valid.", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`lumapps-fivetran`.`airbyte`.`salesforce_LumApps_Platform__c_scd`", "created_at": 1641465609}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.make_date_partitioned_table", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }} default (\n          select max({{ partition_by.field }}) from {{ this }}\n          where {{ partition_by.field }} is not null\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }},\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select * from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select * from {{ to }}\n)\n\nselect\n    child.{{ column_name }}\n\nfrom child\nleft join parent\n    on child.{{ column_name }} = parent.{{ field }}\n\nwhere parent.{{ field }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465605}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "\n\n\n\n{%- macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~\"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set operator = \"=\" %}\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set row_condition_ext %}\n\n{% if row_condition  %}\n    {{ row_condition }} and\n{% endif %}\n\n{% if ignore_row_if == \"all_values_are_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} and {% endif %}\n        {%- endfor %}\n    )\n{% elif ignore_row_if == \"any_value_is_missing\" %}\n    (\n        {% for column in columns -%}\n        {{ column }} is not null{% if not loop.last %} or {% endif %}\n        {%- endfor %}\n    )\n{% endif %}\n{% endset %}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None,\n                                return_difference=False\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        count(v.value_field) as column_values,\n        count(s.value_field) as set_values\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\nwhere column_values != set_values\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    return_difference=True\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n\n    {%- set matching_column_types = [] -%}\n\n    -- DEBUG:\n    -- {{ model.name }}\n    {%- for column in columns_in_relation %}\n    -- {{ column.name | upper }}: {{ column.dtype | upper }} in {{ column_type_list }}?\n        {% if ((column.name | upper ) == column_name) and ((column.dtype | upper ) in column_type_list) -%}\n            {%- do matching_column_types.append(column.name) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    with test_data as (\n\n        select\n            '{{ model.name }}' as model_name,\n            '{{ column_name }}' as column_name,\n            {{ matching_column_types | length }} as number_matching_column_types\n\n    )\n    select *\n    from test_data\n    where\n        number_matching_column_types = 0\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over(order by sort_column) as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model, column_name, datepart, interval) %}\nwith max_recency as (\n\n    select max({{ column_name }} ) as max_date\n    from\n        {{ model }}\n    where\n        {{ column_name }} <= {{ dbt_date.today() }}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    max_date < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model, group_by, timestamp_column, datepart, interval) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model, group_by, timestamp_column, datepart, interval) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model, group_by, timestamp_column, datepart, interval) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\nvalidation_errors as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            '{{ column_name }}' as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with test_data as (\n\n        select\n            {{ relation_column_names | length }} as number_columns,\n            {{ matching_columns | length }} as number_matching_columns\n\n    )\n    select *\n    from test_data\n    where number_columns != number_matching_columns\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with test_data as (\n\n        select\n            '{{ column_list | length }}' as number_columns,\n            '{{ matching_columns | length }}' as number_matching_columns\n\n    )\n    select *\n    from test_data\n    where number_columns != number_matching_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    return_difference=True\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set ordered_column_names = column_list | join(\", \") -%}\n    {%- set ordered_relation_column_names = relation_column_names | join(\", \") -%}\n    with test_data as (\n\n        select\n            cast('{{ ordered_column_names }}' as {{ dbt_utils.type_string() }}) as ordered_column_names,\n            cast('{{ ordered_relation_column_names }}' as {{ dbt_utils.type_string() }}) as ordered_relation_column_names\n\n    )\n    select *\n    from test_data\n    where ordered_column_names != ordered_relation_column_names\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                                    date_col,\n                                                                    date_part=\"day\",\n                                                                    row_condition=None,\n                                                                    test_start_date=None,\n                                                                    test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n{% endif %}\n\n{%- set dr = run_query(sql) -%}\n{%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n{%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n\n),\nmodel_data as (\n\n    select\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n\n)\nselect\n    *\nfrom final\nwhere\n    row_cnt = 0\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number-{{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number-{{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.next_week_start_date": {"unique_id": "macro.dbt_date.next_week_start_date", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/next_week_start_date.sql", "original_file_path": "macros/calendar_date/next_week_start_date.sql", "name": "next_week_start_date", "macro_sql": "{%- macro next_week_start_date(tz=None) -%}\n{{ dbt_date.next_week(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.last_month_start_date": {"unique_id": "macro.dbt_date.last_month_start_date", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/last_month_start_date.sql", "original_file_path": "macros/calendar_date/last_month_start_date.sql", "name": "last_month_start_date", "macro_sql": "{%- macro last_month_start_date(tz=None) -%}\n{{ dbt_date.last_month(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.today(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.this_week": {"unique_id": "macro.dbt_date.this_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/this_week.sql", "original_file_path": "macros/calendar_date/this_week.sql", "name": "this_week", "macro_sql": "{%- macro this_week(date=None, tz=None) -%}\n{{ dbt_utils.this_week_start(date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.lastnext_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\ncase\n    when {{ dbt_date.day_of_week(dbt_utils.date_trunc('week', date), isoweek=False) }} = 1\n    then {{ dbt_date.n_days_ago(\n            dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\",\n            date\n            ) }}\nend\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.date_trunc", "macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465606}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.next_month_start_date": {"unique_id": "macro.dbt_date.next_month_start_date", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/next_month_start_date.sql", "original_file_path": "macros/calendar_date/next_month_start_date.sql", "name": "next_month_start_date", "macro_sql": "{%- macro next_month_start_date(tz=None) -%}\n{{ dbt_date.next_month(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/dbt_modules/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1641465607}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/jb-delafosse/Documents/git/lumapps-bi/dbt/venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {"gold_layer": {"name": "gold_layer", "definition": {"method": "tag", "value": "gold"}}}, "disabled": [], "parent_map": {"model.lumapps_dbt.all_days": [], "model.lumapps_dbt.fct_daily_user_activity": ["model.lumapps_dbt.stg_analytics__user_actions"], "model.lumapps_dbt.fct_session": ["model.lumapps_dbt.stg_analytics__user_actions"], "model.lumapps_dbt.fct_days_since_last_actions": ["model.lumapps_dbt.all_days", "model.lumapps_dbt.fct_daily_user_activity"], "model.lumapps_dbt.dim_content_types": ["model.lumapps_dbt.stg_lumapps__custom_content_types", "model.lumapps_dbt.stg_lumapps__custom_content_types"], "model.lumapps_dbt.dim_sites": ["model.lumapps_dbt.stg_lumapps__sites", "model.lumapps_dbt.stg_lumapps__sites"], "model.lumapps_dbt.fct_user_content_activity": ["model.lumapps_dbt.stg_analytics__user_actions"], "model.lumapps_dbt.dim_contents": ["model.lumapps_dbt.stg_lumapps__contents", "model.lumapps_dbt.stg_lumapps__contents"], "model.lumapps_dbt.dim_lumapps_platform": ["model.lumapps_dbt.stg_salesforce__account", "model.lumapps_dbt.stg_salesforce__lumapps_platform"], "model.lumapps_dbt.fct_organization_adoption": ["model.lumapps_dbt.all_days", "model.lumapps_dbt.fct_daily_user_activity", "model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_session", "model.lumapps_dbt.stg_salesforce__lumapps_platform"], "model.lumapps_dbt.stg_lumapps__sites": ["source.lumapps_dbt.analytics.sites"], "model.lumapps_dbt.stg_analytics__user_actions": ["source.lumapps_dbt.analytics.user_actions"], "model.lumapps_dbt.stg_lumapps__custom_content_types": ["source.lumapps_dbt.analytics.custom_content_types"], "model.lumapps_dbt.stg_lumapps__contents": ["source.lumapps_dbt.analytics.contents"], "model.lumapps_dbt.stg_zendesk__user": ["source.lumapps_dbt.zendesk.zendesk_users"], "model.lumapps_dbt.stg_zendesk__ticket": ["source.lumapps_dbt.zendesk.zendesk_tickets"], "model.lumapps_dbt.stg_zendesk__ticket_metric": ["source.lumapps_dbt.zendesk.zendesk_ticket_metrics"], "model.lumapps_dbt.stg_zendesk__organization": ["source.lumapps_dbt.zendesk.zendesk_organizations"], "model.lumapps_dbt.stg_salesforce__lumapps_platform": ["source.lumapps_dbt.airbyte.salesforce_lumapps_platform"], "model.lumapps_dbt.stg_salesforce__account": ["source.lumapps_dbt.airbyte.salesforce_account"], "test.lumapps_dbt.not_null_fct_days_since_last_actions_engagement_level.064d366e9f": ["model.lumapps_dbt.fct_days_since_last_actions"], "test.lumapps_dbt.accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor.21b836680a": ["model.lumapps_dbt.fct_days_since_last_actions"], "test.lumapps_dbt.not_null_fct_daily_user_activity_engagement_level.bf85801e33": ["model.lumapps_dbt.fct_daily_user_activity"], "test.lumapps_dbt.accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor.d1afa2b861": ["model.lumapps_dbt.fct_daily_user_activity"], "test.lumapps_dbt.not_null_fct_organization_adoption_organization_id.7c54969b75": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0.d05f968334": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0.5fe33e618c": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0.7cb7c726c7": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True.ec9f2d0de4": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True.6947ea3ef2": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True.5d8910579a": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True.93ec4a1f5a": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True.da4931fe3b": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True.edfe3c3942": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True.3aa10c9db8": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id.92e47d62b8": ["model.lumapps_dbt.fct_organization_adoption"], "test.lumapps_dbt.unique_dim_lumapps_platform_organization_id.553384d459": ["model.lumapps_dbt.dim_lumapps_platform"], "test.lumapps_dbt.dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.f77e433c22": ["model.lumapps_dbt.dim_lumapps_platform", "model.lumapps_dbt.stg_zendesk__organization"], "test.lumapps_dbt.not_null_stg_analytics__user_actions_action_type.02e2a8fe40": ["model.lumapps_dbt.stg_analytics__user_actions"], "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction.16122a8055": ["model.lumapps_dbt.stg_analytics__user_actions"], "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp.c226eceb2f": ["model.lumapps_dbt.stg_analytics__user_actions"], "test.lumapps_dbt.not_null_stg_analytics__user_actions_user_id.62ec52a63c": ["model.lumapps_dbt.stg_analytics__user_actions"], "test.lumapps_dbt.not_null_stg_analytics__user_actions_country.d39f5cbb9c": ["model.lumapps_dbt.stg_analytics__user_actions"], "test.lumapps_dbt.unique_stg_zendesk__user_id.2301fe01d4": ["model.lumapps_dbt.stg_zendesk__user"], "test.lumapps_dbt.not_null_stg_zendesk__user_id.83f13f1c76": ["model.lumapps_dbt.stg_zendesk__user"], "test.lumapps_dbt.accepted_values_stg_zendesk__user_role__end_user__agent__admin.8eabb6a566": ["model.lumapps_dbt.stg_zendesk__user"], "test.lumapps_dbt.relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_.46e7a20c7a": ["model.lumapps_dbt.stg_zendesk__organization", "model.lumapps_dbt.stg_zendesk__user"], "test.lumapps_dbt.unique_stg_zendesk__organization_id.ed42bcc970": ["model.lumapps_dbt.stg_zendesk__organization"], "test.lumapps_dbt.not_null_stg_zendesk__organization_id.3a880a6661": ["model.lumapps_dbt.stg_zendesk__organization"], "test.lumapps_dbt.unique_stg_zendesk__ticket_id.ee59617b23": ["model.lumapps_dbt.stg_zendesk__ticket"], "test.lumapps_dbt.not_null_stg_zendesk__ticket_id.bc882c595a": ["model.lumapps_dbt.stg_zendesk__ticket"], "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_type__problem__incident__question__task.7f5866a855": ["model.lumapps_dbt.stg_zendesk__ticket"], "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted.7d75ffea26": ["model.lumapps_dbt.stg_zendesk__ticket"], "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low.ce3c2bccca": ["model.lumapps_dbt.stg_zendesk__ticket"], "test.lumapps_dbt.relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_.d29e6732f9": ["model.lumapps_dbt.stg_zendesk__organization", "model.lumapps_dbt.stg_zendesk__ticket"], "test.lumapps_dbt.unique_stg_zendesk__ticket_metric_ticket_id.c31f4a7853": ["model.lumapps_dbt.stg_zendesk__ticket_metric"], "test.lumapps_dbt.not_null_stg_zendesk__ticket_metric_ticket_id.b11430f069": ["model.lumapps_dbt.stg_zendesk__ticket_metric"], "test.lumapps_dbt.relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_.ec6acb53bb": ["model.lumapps_dbt.stg_zendesk__ticket", "model.lumapps_dbt.stg_zendesk__ticket_metric"], "test.lumapps_dbt.unique_stg_salesforce__account_id.3fc0ae23fd": ["model.lumapps_dbt.stg_salesforce__account"], "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.1312f7a048": ["model.lumapps_dbt.stg_salesforce__account", "model.lumapps_dbt.stg_zendesk__organization"], "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_id.ebe6dfbf75": ["model.lumapps_dbt.stg_salesforce__lumapps_platform"], "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_organization_id.6ef6657365": ["model.lumapps_dbt.stg_salesforce__lumapps_platform"], "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_.0e6d8ee94b": ["model.lumapps_dbt.stg_salesforce__account", "model.lumapps_dbt.stg_salesforce__lumapps_platform"], "source.lumapps_dbt.analytics.user_actions": [], "source.lumapps_dbt.analytics.contents": [], "source.lumapps_dbt.analytics.sites": [], "source.lumapps_dbt.analytics.custom_content_types": [], "source.lumapps_dbt.zendesk.zendesk_tickets": [], "source.lumapps_dbt.zendesk.zendesk_ticket_metrics": [], "source.lumapps_dbt.zendesk.zendesk_organizations": [], "source.lumapps_dbt.zendesk.zendesk_users": [], "source.lumapps_dbt.airbyte.salesforce_account": [], "source.lumapps_dbt.airbyte.salesforce_account_history": [], "source.lumapps_dbt.airbyte.salesforce_lumapps_platform": [], "source.lumapps_dbt.airbyte.salesforce_lumapps_platform_history": []}, "child_map": {"model.lumapps_dbt.all_days": ["model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_organization_adoption"], "model.lumapps_dbt.fct_daily_user_activity": ["model.lumapps_dbt.fct_days_since_last_actions", "model.lumapps_dbt.fct_organization_adoption", "test.lumapps_dbt.accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor.d1afa2b861", "test.lumapps_dbt.not_null_fct_daily_user_activity_engagement_level.bf85801e33"], "model.lumapps_dbt.fct_session": ["model.lumapps_dbt.fct_organization_adoption"], "model.lumapps_dbt.fct_days_since_last_actions": ["model.lumapps_dbt.fct_organization_adoption", "model.lumapps_dbt.fct_organization_adoption", "model.lumapps_dbt.fct_organization_adoption", "test.lumapps_dbt.accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor.21b836680a", "test.lumapps_dbt.not_null_fct_days_since_last_actions_engagement_level.064d366e9f"], "model.lumapps_dbt.dim_content_types": [], "model.lumapps_dbt.dim_sites": [], "model.lumapps_dbt.fct_user_content_activity": [], "model.lumapps_dbt.dim_contents": [], "model.lumapps_dbt.dim_lumapps_platform": ["test.lumapps_dbt.dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.f77e433c22", "test.lumapps_dbt.unique_dim_lumapps_platform_organization_id.553384d459"], "model.lumapps_dbt.fct_organization_adoption": ["test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True.edfe3c3942", "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True.93ec4a1f5a", "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True.6947ea3ef2", "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True.3aa10c9db8", "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True.da4931fe3b", "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True.5d8910579a", "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True.ec9f2d0de4", "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0.d05f968334", "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0.7cb7c726c7", "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0.5fe33e618c", "test.lumapps_dbt.dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id.92e47d62b8", "test.lumapps_dbt.not_null_fct_organization_adoption_organization_id.7c54969b75"], "model.lumapps_dbt.stg_lumapps__sites": ["model.lumapps_dbt.dim_sites", "model.lumapps_dbt.dim_sites"], "model.lumapps_dbt.stg_analytics__user_actions": ["model.lumapps_dbt.fct_daily_user_activity", "model.lumapps_dbt.fct_session", "model.lumapps_dbt.fct_user_content_activity", "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction.16122a8055", "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp.c226eceb2f", "test.lumapps_dbt.not_null_stg_analytics__user_actions_action_type.02e2a8fe40", "test.lumapps_dbt.not_null_stg_analytics__user_actions_country.d39f5cbb9c", "test.lumapps_dbt.not_null_stg_analytics__user_actions_user_id.62ec52a63c"], "model.lumapps_dbt.stg_lumapps__custom_content_types": ["model.lumapps_dbt.dim_content_types", "model.lumapps_dbt.dim_content_types"], "model.lumapps_dbt.stg_lumapps__contents": ["model.lumapps_dbt.dim_contents", "model.lumapps_dbt.dim_contents"], "model.lumapps_dbt.stg_zendesk__user": ["test.lumapps_dbt.accepted_values_stg_zendesk__user_role__end_user__agent__admin.8eabb6a566", "test.lumapps_dbt.not_null_stg_zendesk__user_id.83f13f1c76", "test.lumapps_dbt.relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_.46e7a20c7a", "test.lumapps_dbt.unique_stg_zendesk__user_id.2301fe01d4"], "model.lumapps_dbt.stg_zendesk__ticket": ["test.lumapps_dbt.accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low.ce3c2bccca", "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted.7d75ffea26", "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_type__problem__incident__question__task.7f5866a855", "test.lumapps_dbt.not_null_stg_zendesk__ticket_id.bc882c595a", "test.lumapps_dbt.relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_.ec6acb53bb", "test.lumapps_dbt.relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_.d29e6732f9", "test.lumapps_dbt.unique_stg_zendesk__ticket_id.ee59617b23"], "model.lumapps_dbt.stg_zendesk__ticket_metric": ["test.lumapps_dbt.not_null_stg_zendesk__ticket_metric_ticket_id.b11430f069", "test.lumapps_dbt.relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_.ec6acb53bb", "test.lumapps_dbt.unique_stg_zendesk__ticket_metric_ticket_id.c31f4a7853"], "model.lumapps_dbt.stg_zendesk__organization": ["test.lumapps_dbt.dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.f77e433c22", "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.1312f7a048", "test.lumapps_dbt.not_null_stg_zendesk__organization_id.3a880a6661", "test.lumapps_dbt.relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_.d29e6732f9", "test.lumapps_dbt.relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_.46e7a20c7a", "test.lumapps_dbt.unique_stg_zendesk__organization_id.ed42bcc970"], "model.lumapps_dbt.stg_salesforce__lumapps_platform": ["model.lumapps_dbt.dim_lumapps_platform", "model.lumapps_dbt.fct_organization_adoption", "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_.0e6d8ee94b", "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_id.ebe6dfbf75", "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_organization_id.6ef6657365"], "model.lumapps_dbt.stg_salesforce__account": ["model.lumapps_dbt.dim_lumapps_platform", "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.1312f7a048", "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_.0e6d8ee94b", "test.lumapps_dbt.unique_stg_salesforce__account_id.3fc0ae23fd"], "test.lumapps_dbt.not_null_fct_days_since_last_actions_engagement_level.064d366e9f": [], "test.lumapps_dbt.accepted_values_fct_days_since_last_actions_engagement_level__visitor__participant__contributor.21b836680a": [], "test.lumapps_dbt.not_null_fct_daily_user_activity_engagement_level.bf85801e33": [], "test.lumapps_dbt.accepted_values_fct_daily_user_activity_engagement_level__visitor__participant__contributor.d1afa2b861": [], "test.lumapps_dbt.not_null_fct_organization_adoption_organization_id.7c54969b75": [], "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_daily_active_visitors__daily_active_participants__daily_active_contributors___daily_active_users__0.d05f968334": [], "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_weekly_active_visitors__weekly_active_participants__weekly_active_contributors___weekly_active_users__0.5fe33e618c": [], "test.lumapps_dbt.dbt_expectations_expect_multicolumn_sum_to_equal_fct_organization_adoption_monthly_active_visitors__monthly_active_participants__monthly_active_contributors___monthly_active_users__0.7cb7c726c7": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_visitors__daily_active_visitors__True.ec9f2d0de4": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_visitors__weekly_active_visitors__True.6947ea3ef2": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_participants__daily_active_participants__True.5d8910579a": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_participants__weekly_active_participants__True.93ec4a1f5a": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_weekly_active_contributors__daily_active_contributors__True.da4931fe3b": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_monthly_active_contributors__weekly_active_contributors__True.edfe3c3942": [], "test.lumapps_dbt.dbt_expectations_expect_column_pair_values_A_to_be_greater_than_B_fct_organization_adoption_session_count__daily_active_users__True.3aa10c9db8": [], "test.lumapps_dbt.dbt_utils_unique_combination_of_columns_fct_organization_adoption_date__organization_id.92e47d62b8": [], "test.lumapps_dbt.unique_dim_lumapps_platform_organization_id.553384d459": [], "test.lumapps_dbt.dbt_utils_relationships_where_dim_lumapps_platform_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.f77e433c22": [], "test.lumapps_dbt.not_null_stg_analytics__user_actions_action_type.02e2a8fe40": [], "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_action_type__ViewAction__CommentAction__CreateAction__UpdateAction__DeleteAction__FollowAction__ReactAction__VoteAction.16122a8055": [], "test.lumapps_dbt.accepted_values_stg_analytics__user_actions_cell__lumsites__lumapps_us_002__lumapps_others__lumapps_eu__lumapps_jp.c226eceb2f": [], "test.lumapps_dbt.not_null_stg_analytics__user_actions_user_id.62ec52a63c": [], "test.lumapps_dbt.not_null_stg_analytics__user_actions_country.d39f5cbb9c": [], "test.lumapps_dbt.unique_stg_zendesk__user_id.2301fe01d4": [], "test.lumapps_dbt.not_null_stg_zendesk__user_id.83f13f1c76": [], "test.lumapps_dbt.accepted_values_stg_zendesk__user_role__end_user__agent__admin.8eabb6a566": [], "test.lumapps_dbt.relationships_stg_zendesk__user_zendesk_organization_id__id__ref_stg_zendesk__organization_.46e7a20c7a": [], "test.lumapps_dbt.unique_stg_zendesk__organization_id.ed42bcc970": [], "test.lumapps_dbt.not_null_stg_zendesk__organization_id.3a880a6661": [], "test.lumapps_dbt.unique_stg_zendesk__ticket_id.ee59617b23": [], "test.lumapps_dbt.not_null_stg_zendesk__ticket_id.bc882c595a": [], "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_type__problem__incident__question__task.7f5866a855": [], "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_status__open__pending__solved__hold__closed__new__deleted.7d75ffea26": [], "test.lumapps_dbt.accepted_values_stg_zendesk__ticket_priority__urgent__high__normal__low.ce3c2bccca": [], "test.lumapps_dbt.relationships_stg_zendesk__ticket_zendesk_organization_id__id__ref_stg_zendesk__organization_.d29e6732f9": [], "test.lumapps_dbt.unique_stg_zendesk__ticket_metric_ticket_id.c31f4a7853": [], "test.lumapps_dbt.not_null_stg_zendesk__ticket_metric_ticket_id.b11430f069": [], "test.lumapps_dbt.relationships_stg_zendesk__ticket_metric_ticket_id__id__ref_stg_zendesk__ticket_.ec6acb53bb": [], "test.lumapps_dbt.unique_stg_salesforce__account_id.3fc0ae23fd": [], "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__account_zendesk_organization_id__id__zendesk_organization_id_IS_NOT_NULL__ref_stg_zendesk__organization_.1312f7a048": [], "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_id.ebe6dfbf75": [], "test.lumapps_dbt.unique_stg_salesforce__lumapps_platform_organization_id.6ef6657365": [], "test.lumapps_dbt.dbt_utils_relationships_where_stg_salesforce__lumapps_platform_salesforce_account_id__id__salesforce_account_id_IS_NOT_NULL__ref_stg_salesforce__account_.0e6d8ee94b": [], "source.lumapps_dbt.analytics.user_actions": ["model.lumapps_dbt.stg_analytics__user_actions"], "source.lumapps_dbt.analytics.contents": ["model.lumapps_dbt.stg_lumapps__contents"], "source.lumapps_dbt.analytics.sites": ["model.lumapps_dbt.stg_lumapps__sites"], "source.lumapps_dbt.analytics.custom_content_types": ["model.lumapps_dbt.stg_lumapps__custom_content_types"], "source.lumapps_dbt.zendesk.zendesk_tickets": ["model.lumapps_dbt.stg_zendesk__ticket"], "source.lumapps_dbt.zendesk.zendesk_ticket_metrics": ["model.lumapps_dbt.stg_zendesk__ticket_metric"], "source.lumapps_dbt.zendesk.zendesk_organizations": ["model.lumapps_dbt.stg_zendesk__organization"], "source.lumapps_dbt.zendesk.zendesk_users": ["model.lumapps_dbt.stg_zendesk__user"], "source.lumapps_dbt.airbyte.salesforce_account": ["model.lumapps_dbt.stg_salesforce__account"], "source.lumapps_dbt.airbyte.salesforce_account_history": [], "source.lumapps_dbt.airbyte.salesforce_lumapps_platform": ["model.lumapps_dbt.stg_salesforce__lumapps_platform"], "source.lumapps_dbt.airbyte.salesforce_lumapps_platform_history": []}}